var dataJson = {"arch":{"ispc":false,"isunix":true,"ismac":true},"build":"mpcACCsystem","ref":false,"files":[{"name":"ert_main.cpp","type":"source","group":"main","path":"/Users/deyun/git/sim2cpp/AdaptiveCruiseControlExample/mpcACCsystem_ert_rtw","tag":"","groupDisplay":"Main file","code":"//\n// Academic License - for use in teaching, academic research, and meeting\n// course requirements at degree granting institutions only.  Not for\n// government, commercial, or other organizational use.\n//\n// File: ert_main.cpp\n//\n// Code generated for Simulink model 'mpcACCsystem'.\n//\n// Model version                  : 14.5\n// Simulink Coder version         : 24.2 (R2024b) 21-Jun-2024\n// C/C++ source code generated on : Sun Jun  8 15:50:16 2025\n//\n// Target selection: ert.tlc\n// Embedded hardware selection: Apple->ARM64\n// Code generation objectives: Unspecified\n// Validation result: Not run\n//\n#include <stdio.h>              // This example main program uses printf/fflush\n#include \"mpcACCsystem.h\"              // Model header file\n\nstatic mpcACCsystem mpcACCsystem_Obj;  // Instance of model class\n\n//\n// Associating rt_OneStep with a real-time clock or interrupt service routine\n// is what makes the generated code \"real-time\".  The function rt_OneStep is\n// always associated with the base rate of the model.  Subrates are managed\n// by the base rate from inside the generated code.  Enabling/disabling\n// interrupts and floating point context switches are target specific.  This\n// example code indicates where these should take place relative to executing\n// the generated code step function.  Overrun behavior should be tailored to\n// your application needs.  This example simply sets an error status in the\n// real-time model and returns from rt_OneStep.\n//\nvoid rt_OneStep(void);\nvoid rt_OneStep(void)\n{\n  static boolean_T OverrunFlag{ false };\n\n  // Disable interrupts here\n\n  // Check for overrun\n  if (OverrunFlag) {\n    mpcACCsystem_Obj.getRTM()->setErrorStatus(\"Overrun\");\n    return;\n  }\n\n  OverrunFlag = true;\n\n  // Save FPU context here (if necessary)\n  // Re-enable timer or interrupt here\n  // Set model inputs here\n\n  // Step the model\n  mpcACCsystem_Obj.step();\n\n  // Get model outputs here\n\n  // Indicate task complete\n  OverrunFlag = false;\n\n  // Disable interrupts here\n  // Restore FPU context here (if necessary)\n  // Enable interrupts here\n}\n\n//\n// The example main function illustrates what is required by your\n// application code to initialize, execute, and terminate the generated code.\n// Attaching rt_OneStep to a real-time clock is target specific. This example\n// illustrates how you do this relative to initializing the model.\n//\nint_T main(int_T argc, const char *argv[])\n{\n  // Unused arguments\n  (void)(argc);\n  (void)(argv);\n\n  // Initialize model\n  mpcACCsystem_Obj.initialize();\n\n  // Simulating the model step behavior (in non real-time) to\n  //   simulate model behavior at stop time.\n\n  while (mpcACCsystem_Obj.getRTM()->getErrorStatus() == (nullptr)&&\n         !mpcACCsystem_Obj.getRTM()->getStopRequested()) {\n    rt_OneStep();\n  }\n\n  // Terminate model\n  mpcACCsystem_Obj.terminate();\n  return 0;\n}\n\n//\n// File trailer for generated code.\n//\n// [EOF]\n//\n"},{"name":"mpcACCsystem.cpp","type":"source","group":"model","path":"/Users/deyun/git/sim2cpp/AdaptiveCruiseControlExample/mpcACCsystem_ert_rtw","tag":"","groupDisplay":"Model files","code":"//\n// Academic License - for use in teaching, academic research, and meeting\n// course requirements at degree granting institutions only.  Not for\n// government, commercial, or other organizational use.\n//\n// File: mpcACCsystem.cpp\n//\n// Code generated for Simulink model 'mpcACCsystem'.\n//\n// Model version                  : 14.5\n// Simulink Coder version         : 24.2 (R2024b) 21-Jun-2024\n// C/C++ source code generated on : Sun Jun  8 15:50:16 2025\n//\n// Target selection: ert.tlc\n// Embedded hardware selection: Apple->ARM64\n// Code generation objectives: Unspecified\n// Validation result: Not run\n//\n#include \"mpcACCsystem.h\"\n#include \"rtwtypes.h\"\n#include <cmath>\n#include <cstring>\n#include \"mpcACCsystem_private.h\"\n#include \"cmath\"\n\n// Named constants for MATLAB Function: '<S35>/optimizer'\nconst real_T mpcACCsystem_RMDscale{ 0.02 };\n\nconst real_T mpcACCsystem_RMVscale{ 0.2 };\n\nconst int32_T mpcACCsystem_degrees{ 4 };\n\nconst int32_T mpcACCsystem_ny{ 2 };\n\nconst int32_T mpcACCsystem_p{ 30 };\n\nconst real_T mpcACCsystem_voff{ 0.4 };\n\n//\n// This function updates continuous states using the ODE3 fixed-step\n// solver algorithm\n//\nvoid mpcACCsystem::rt_ertODEUpdateContinuousStates(RTWSolverInfo *si )\n{\n  // Solver Matrices\n  static const real_T rt_ODE3_A[3]{\n    1.0/2.0, 3.0/4.0, 1.0\n  };\n\n  static const real_T rt_ODE3_B[3][3]{\n    { 1.0/2.0, 0.0, 0.0 },\n\n    { 0.0, 3.0/4.0, 0.0 },\n\n    { 2.0/9.0, 1.0/3.0, 4.0/9.0 }\n  };\n\n  time_T t { rtsiGetT(si) };\n\n  time_T tnew { rtsiGetSolverStopTime(si) };\n\n  time_T h { rtsiGetStepSize(si) };\n\n  real_T *x { rtsiGetContStates(si) };\n\n  ODE3_IntgData *id { static_cast<ODE3_IntgData *>(rtsiGetSolverData(si)) };\n\n  real_T *y { id->y };\n\n  real_T *f0 { id->f[0] };\n\n  real_T *f1 { id->f[1] };\n\n  real_T *f2 { id->f[2] };\n\n  real_T hB[3];\n  int_T i;\n  int_T nXc { 6 };\n\n  rtsiSetSimTimeStep(si,MINOR_TIME_STEP);\n\n  // Save the state values at time t in y, we'll use x as ynew.\n  (void) std::memcpy(y, x,\n                     static_cast<uint_T>(nXc)*sizeof(real_T));\n\n  // Assumes that rtsiSetT and ModelOutputs are up-to-date\n  // f0 = f(t,y)\n  rtsiSetdX(si, f0);\n  mpcACCsystem_derivatives();\n\n  // f(:,2) = feval(odefile, t + hA(1), y + f*hB(:,1), args(:)(*));\n  hB[0] = h * rt_ODE3_B[0][0];\n  for (i = 0; i < nXc; i++) {\n    x[i] = y[i] + (f0[i]*hB[0]);\n  }\n\n  rtsiSetT(si, t + h*rt_ODE3_A[0]);\n  rtsiSetdX(si, f1);\n  this->step();\n  mpcACCsystem_derivatives();\n\n  // f(:,3) = feval(odefile, t + hA(2), y + f*hB(:,2), args(:)(*));\n  for (i = 0; i <= 1; i++) {\n    hB[i] = h * rt_ODE3_B[1][i];\n  }\n\n  for (i = 0; i < nXc; i++) {\n    x[i] = y[i] + (f0[i]*hB[0] + f1[i]*hB[1]);\n  }\n\n  rtsiSetT(si, t + h*rt_ODE3_A[1]);\n  rtsiSetdX(si, f2);\n  this->step();\n  mpcACCsystem_derivatives();\n\n  // tnew = t + hA(3);\n  // ynew = y + f*hB(:,3);\n  for (i = 0; i <= 2; i++) {\n    hB[i] = h * rt_ODE3_B[2][i];\n  }\n\n  for (i = 0; i < nXc; i++) {\n    x[i] = y[i] + (f0[i]*hB[0] + f1[i]*hB[1] + f2[i]*hB[2]);\n  }\n\n  rtsiSetT(si, tnew);\n  rtsiSetSimTimeStep(si,MAJOR_TIME_STEP);\n}\n\n//\n// Output and update for atomic system:\n//    '<S1>/DataTypeConversion_L0'\n//    '<S1>/DataTypeConversion_amax'\n//    '<S1>/DataTypeConversion_amin'\n//    '<S1>/DataTypeConversion_atrack'\n//    '<S1>/DataTypeConversion_vset'\n//\nvoid mpcACCsystem::mpcACCsys_DataTypeConversion_L0(real_T rtu_u, real_T *rty_y)\n{\n  *rty_y = rtu_u;\n}\n\n// Function for MATLAB Function: '<S35>/optimizer'\nreal_T mpcACCsystem::mpcACCsystem_norm(const real_T x[4])\n{\n  real_T absxk;\n  real_T scale;\n  real_T t;\n  real_T y;\n  scale = 3.3121686421112381E-170;\n  absxk = std::abs(x[0]);\n  if (absxk > 3.3121686421112381E-170) {\n    y = 1.0;\n    scale = absxk;\n  } else {\n    t = absxk / 3.3121686421112381E-170;\n    y = t * t;\n  }\n\n  absxk = std::abs(x[1]);\n  if (absxk > scale) {\n    t = scale / absxk;\n    y = y * t * t + 1.0;\n    scale = absxk;\n  } else {\n    t = absxk / scale;\n    y += t * t;\n  }\n\n  absxk = std::abs(x[2]);\n  if (absxk > scale) {\n    t = scale / absxk;\n    y = y * t * t + 1.0;\n    scale = absxk;\n  } else {\n    t = absxk / scale;\n    y += t * t;\n  }\n\n  absxk = std::abs(x[3]);\n  if (absxk > scale) {\n    t = scale / absxk;\n    y = y * t * t + 1.0;\n    scale = absxk;\n  } else {\n    t = absxk / scale;\n    y += t * t;\n  }\n\n  return scale * std::sqrt(y);\n}\n\n// Function for MATLAB Function: '<S35>/optimizer'\nreal_T mpcACCsystem::mpcACCsystem_maximum(const real_T x[4])\n{\n  real_T ex;\n  int32_T idx;\n  int32_T k;\n  if (!std::isnan(x[0])) {\n    idx = 1;\n  } else {\n    boolean_T exitg1;\n    idx = 0;\n    k = 2;\n    exitg1 = false;\n    while ((!exitg1) && (k < 5)) {\n      if (!std::isnan(x[k - 1])) {\n        idx = k;\n        exitg1 = true;\n      } else {\n        k++;\n      }\n    }\n  }\n\n  if (idx == 0) {\n    ex = x[0];\n  } else {\n    ex = x[idx - 1];\n    for (k = idx + 1; k < 5; k++) {\n      real_T x_0;\n      x_0 = x[k - 1];\n      if (ex < x_0) {\n        ex = x_0;\n      }\n    }\n  }\n\n  return ex;\n}\n\n// Function for MATLAB Function: '<S35>/optimizer'\nreal_T mpcACCsystem::mpcACCsystem_xnrm2(int32_T n, const real_T x[16], int32_T\n  ix0)\n{\n  real_T y;\n  y = 0.0;\n  if (n >= 1) {\n    if (n == 1) {\n      y = std::abs(x[ix0 - 1]);\n    } else {\n      real_T scale;\n      int32_T kend;\n      scale = 3.3121686421112381E-170;\n      kend = ix0 + n;\n      for (int32_T k{ix0}; k < kend; k++) {\n        real_T absxk;\n        absxk = std::abs(x[k - 1]);\n        if (absxk > scale) {\n          real_T t;\n          t = scale / absxk;\n          y = y * t * t + 1.0;\n          scale = absxk;\n        } else {\n          real_T t;\n          t = absxk / scale;\n          y += t * t;\n        }\n      }\n\n      y = scale * std::sqrt(y);\n    }\n  }\n\n  return y;\n}\n\nreal_T rt_hypotd_snf(real_T u0, real_T u1)\n{\n  real_T a;\n  real_T b;\n  real_T y;\n  a = std::abs(u0);\n  b = std::abs(u1);\n  if (a < b) {\n    a /= b;\n    y = std::sqrt(a * a + 1.0) * b;\n  } else if (a > b) {\n    b /= a;\n    y = std::sqrt(b * b + 1.0) * a;\n  } else if (std::isnan(b)) {\n    y = (rtNaN);\n  } else {\n    y = a * 1.4142135623730951;\n  }\n\n  return y;\n}\n\n// Function for MATLAB Function: '<S35>/optimizer'\nvoid mpcACCsystem::mpcACCsystem_xgemv(int32_T b_m, int32_T n, const real_T b_A\n  [16], int32_T ia0, const real_T x[16], int32_T ix0, real_T y[4])\n{\n  if ((b_m != 0) && (n != 0)) {\n    int32_T b;\n    if (n - 1 >= 0) {\n      std::memset(&y[0], 0, static_cast<uint32_T>(n) * sizeof(real_T));\n    }\n\n    b = ((n - 1) << 2) + ia0;\n    for (int32_T b_iy{ia0}; b_iy <= b; b_iy += 4) {\n      real_T c;\n      int32_T d;\n      int32_T ia;\n      c = 0.0;\n      d = (b_iy + b_m) - 1;\n      for (ia = b_iy; ia <= d; ia++) {\n        c += x[((ix0 + ia) - b_iy) - 1] * b_A[ia - 1];\n      }\n\n      ia = (b_iy - ia0) >> 2;\n      y[ia] += c;\n    }\n  }\n}\n\n// Function for MATLAB Function: '<S35>/optimizer'\nvoid mpcACCsystem::mpcACCsystem_xgerc(int32_T b_m, int32_T n, real_T alpha1,\n  int32_T ix0, const real_T y[4], real_T b_A[16], int32_T ia0)\n{\n  if (!(alpha1 == 0.0)) {\n    int32_T jA;\n    jA = ia0;\n    for (int32_T j{0}; j < n; j++) {\n      real_T temp;\n      temp = y[j];\n      if (temp != 0.0) {\n        int32_T b;\n        temp *= alpha1;\n        b = (b_m + jA) - 1;\n        for (int32_T ijA{jA}; ijA <= b; ijA++) {\n          b_A[ijA - 1] += b_A[((ix0 + ijA) - jA) - 1] * temp;\n        }\n      }\n\n      jA += 4;\n    }\n  }\n}\n\n// Function for MATLAB Function: '<S35>/optimizer'\nvoid mpcACCsystem::mpcACCsystem_KWIKfactor(const real_T b_Ac[384], const int32_T\n  iC[96], int32_T nA, const real_T b_Linv[16], real_T D[16], real_T b_H[16],\n  int32_T n, real_T RLinv[16], real_T *Status)\n{\n  real_T Q[16];\n  real_T R[16];\n  real_T TL[16];\n  real_T b_A[16];\n  real_T tau[4];\n  real_T work[4];\n  real_T atmp;\n  real_T b_A_0;\n  real_T beta1;\n  int32_T b_coltop;\n  int32_T b_lastv;\n  int32_T e_tmp;\n  int32_T exitg1;\n  int32_T ii;\n  int32_T k_i;\n  int32_T knt;\n  boolean_T exitg2;\n  *Status = 1.0;\n  std::memset(&RLinv[0], 0, sizeof(real_T) << 4U);\n  for (ii = 0; ii < nA; ii++) {\n    b_lastv = iC[ii];\n    for (k_i = 0; k_i < 4; k_i++) {\n      RLinv[k_i + (ii << 2)] = ((b_Ac[b_lastv - 1] * b_Linv[k_i] + b_Linv[k_i +\n        4] * b_Ac[b_lastv + 95]) + b_Linv[k_i + 8] * b_Ac[b_lastv + 191]) +\n        b_Linv[k_i + 12] * b_Ac[b_lastv + 287];\n    }\n  }\n\n  std::memcpy(&b_A[0], &RLinv[0], sizeof(real_T) << 4U);\n  tau[0] = 0.0;\n  work[0] = 0.0;\n  tau[1] = 0.0;\n  work[1] = 0.0;\n  tau[2] = 0.0;\n  work[2] = 0.0;\n  tau[3] = 0.0;\n  work[3] = 0.0;\n  for (k_i = 0; k_i < 4; k_i++) {\n    ii = (k_i << 2) + k_i;\n    if (k_i + 1 < 4) {\n      atmp = b_A[ii];\n      b_lastv = ii + 2;\n      tau[k_i] = 0.0;\n      beta1 = mpcACCsystem_xnrm2(3 - k_i, b_A, ii + 2);\n      if (beta1 != 0.0) {\n        b_A_0 = b_A[ii];\n        beta1 = rt_hypotd_snf(b_A_0, beta1);\n        if (b_A_0 >= 0.0) {\n          beta1 = -beta1;\n        }\n\n        if (std::abs(beta1) < 1.0020841800044864E-292) {\n          knt = 0;\n          e_tmp = (ii - k_i) + 4;\n          do {\n            knt++;\n            for (b_coltop = b_lastv; b_coltop <= e_tmp; b_coltop++) {\n              b_A[b_coltop - 1] *= 9.9792015476736E+291;\n            }\n\n            beta1 *= 9.9792015476736E+291;\n            atmp *= 9.9792015476736E+291;\n          } while ((std::abs(beta1) < 1.0020841800044864E-292) && (knt < 20));\n\n          beta1 = rt_hypotd_snf(atmp, mpcACCsystem_xnrm2(3 - k_i, b_A, ii + 2));\n          if (atmp >= 0.0) {\n            beta1 = -beta1;\n          }\n\n          tau[k_i] = (beta1 - atmp) / beta1;\n          atmp = 1.0 / (atmp - beta1);\n          for (b_coltop = b_lastv; b_coltop <= e_tmp; b_coltop++) {\n            b_A[b_coltop - 1] *= atmp;\n          }\n\n          for (b_lastv = 0; b_lastv < knt; b_lastv++) {\n            beta1 *= 1.0020841800044864E-292;\n          }\n\n          atmp = beta1;\n        } else {\n          tau[k_i] = (beta1 - b_A_0) / beta1;\n          atmp = 1.0 / (b_A_0 - beta1);\n          b_coltop = (ii - k_i) + 4;\n          for (knt = b_lastv; knt <= b_coltop; knt++) {\n            b_A[knt - 1] *= atmp;\n          }\n\n          atmp = beta1;\n        }\n      }\n\n      b_A[ii] = 1.0;\n      if (tau[k_i] != 0.0) {\n        b_lastv = 4 - k_i;\n        knt = (ii - k_i) + 3;\n        while ((b_lastv > 0) && (b_A[knt] == 0.0)) {\n          b_lastv--;\n          knt--;\n        }\n\n        knt = 3 - k_i;\n        exitg2 = false;\n        while ((!exitg2) && (knt > 0)) {\n          b_coltop = (((knt - 1) << 2) + ii) + 4;\n          e_tmp = b_coltop;\n          do {\n            exitg1 = 0;\n            if (e_tmp + 1 <= b_coltop + b_lastv) {\n              if (b_A[e_tmp] != 0.0) {\n                exitg1 = 1;\n              } else {\n                e_tmp++;\n              }\n            } else {\n              knt--;\n              exitg1 = 2;\n            }\n          } while (exitg1 == 0);\n\n          if (exitg1 == 1) {\n            exitg2 = true;\n          }\n        }\n      } else {\n        b_lastv = 0;\n        knt = 0;\n      }\n\n      if (b_lastv > 0) {\n        mpcACCsystem_xgemv(b_lastv, knt, b_A, ii + 5, b_A, ii + 1, work);\n        mpcACCsystem_xgerc(b_lastv, knt, -tau[k_i], ii + 1, work, b_A, ii + 5);\n      }\n\n      b_A[ii] = atmp;\n    } else {\n      tau[3] = 0.0;\n    }\n  }\n\n  for (k_i = 0; k_i < 4; k_i++) {\n    for (ii = 0; ii <= k_i; ii++) {\n      b_lastv = k_i << 2;\n      R[ii + b_lastv] = b_A[b_lastv + ii];\n    }\n\n    for (ii = k_i + 2; ii < 5; ii++) {\n      R[(ii + (k_i << 2)) - 1] = 0.0;\n    }\n\n    work[k_i] = 0.0;\n  }\n\n  for (k_i = 3; k_i >= 0; k_i--) {\n    ii = ((k_i << 2) + k_i) + 5;\n    if (k_i + 1 < 4) {\n      b_A[ii - 5] = 1.0;\n      if (tau[k_i] != 0.0) {\n        b_lastv = 4 - k_i;\n        knt = ii - k_i;\n        while ((b_lastv > 0) && (b_A[knt - 2] == 0.0)) {\n          b_lastv--;\n          knt--;\n        }\n\n        knt = 3 - k_i;\n        exitg2 = false;\n        while ((!exitg2) && (knt > 0)) {\n          b_coltop = ((knt - 1) << 2) + ii;\n          e_tmp = b_coltop;\n          do {\n            exitg1 = 0;\n            if (e_tmp <= (b_coltop + b_lastv) - 1) {\n              if (b_A[e_tmp - 1] != 0.0) {\n                exitg1 = 1;\n              } else {\n                e_tmp++;\n              }\n            } else {\n              knt--;\n              exitg1 = 2;\n            }\n          } while (exitg1 == 0);\n\n          if (exitg1 == 1) {\n            exitg2 = true;\n          }\n        }\n      } else {\n        b_lastv = 0;\n        knt = 0;\n      }\n\n      if (b_lastv > 0) {\n        mpcACCsystem_xgemv(b_lastv, knt, b_A, ii, b_A, ii - 4, work);\n        mpcACCsystem_xgerc(b_lastv, knt, -tau[k_i], ii - 4, work, b_A, ii);\n      }\n\n      knt = ii - k_i;\n      for (b_lastv = ii - 3; b_lastv < knt; b_lastv++) {\n        b_A[b_lastv - 1] *= -tau[k_i];\n      }\n    }\n\n    b_A[ii - 5] = 1.0 - tau[k_i];\n    for (b_lastv = 0; b_lastv < k_i; b_lastv++) {\n      b_A[(ii - b_lastv) - 6] = 0.0;\n    }\n  }\n\n  for (k_i = 0; k_i < 4; k_i++) {\n    ii = k_i << 2;\n    Q[ii] = b_A[ii];\n    Q[ii + 1] = b_A[ii + 1];\n    Q[ii + 2] = b_A[ii + 2];\n    Q[ii + 3] = b_A[ii + 3];\n  }\n\n  k_i = 0;\n  do {\n    exitg1 = 0;\n    if (k_i <= nA - 1) {\n      if (std::abs(R[(k_i << 2) + k_i]) < 1.0E-12) {\n        *Status = -2.0;\n        exitg1 = 1;\n      } else {\n        k_i++;\n      }\n    } else {\n      for (k_i = 0; k_i < n; k_i++) {\n        for (ii = 0; ii < n; ii++) {\n          b_lastv = k_i << 2;\n          knt = ii << 2;\n          TL[k_i + knt] = ((b_Linv[b_lastv + 1] * Q[knt + 1] + b_Linv[b_lastv] *\n                            Q[knt]) + b_Linv[b_lastv + 2] * Q[knt + 2]) +\n            b_Linv[b_lastv + 3] * Q[knt + 3];\n        }\n      }\n\n      std::memset(&RLinv[0], 0, sizeof(real_T) << 4U);\n      for (k_i = nA; k_i >= 1; k_i--) {\n        knt = (k_i - 1) << 2;\n        b_coltop = (k_i + knt) - 1;\n        RLinv[b_coltop] = 1.0;\n        for (ii = k_i; ii <= nA; ii++) {\n          e_tmp = (((ii - 1) << 2) + k_i) - 1;\n          RLinv[e_tmp] /= R[b_coltop];\n        }\n\n        if (k_i > 1) {\n          for (ii = 0; ii <= k_i - 2; ii++) {\n            for (b_lastv = k_i; b_lastv <= nA; b_lastv++) {\n              b_coltop = (b_lastv - 1) << 2;\n              e_tmp = b_coltop + ii;\n              RLinv[e_tmp] -= RLinv[(b_coltop + k_i) - 1] * R[knt + ii];\n            }\n          }\n        }\n      }\n\n      for (b_lastv = 0; b_lastv < n; b_lastv++) {\n        for (knt = b_lastv + 1; knt <= n; knt++) {\n          k_i = ((knt - 1) << 2) + b_lastv;\n          b_H[k_i] = 0.0;\n          for (b_coltop = nA + 1; b_coltop <= n; b_coltop++) {\n            ii = (b_coltop - 1) << 2;\n            b_H[k_i] -= TL[(ii + knt) - 1] * TL[ii + b_lastv];\n          }\n\n          b_H[(knt + (b_lastv << 2)) - 1] = b_H[k_i];\n        }\n      }\n\n      for (b_lastv = 0; b_lastv < nA; b_lastv++) {\n        for (knt = 0; knt < n; knt++) {\n          k_i = (b_lastv << 2) + knt;\n          D[k_i] = 0.0;\n          for (b_coltop = b_lastv + 1; b_coltop <= nA; b_coltop++) {\n            ii = (b_coltop - 1) << 2;\n            D[k_i] += TL[ii + knt] * RLinv[ii + b_lastv];\n          }\n        }\n      }\n\n      exitg1 = 1;\n    }\n  } while (exitg1 == 0);\n}\n\n// Function for MATLAB Function: '<S35>/optimizer'\nvoid mpcACCsystem::mpcACCsystem_DropConstraint(int32_T kDrop, boolean_T iA[96],\n  int32_T *nA, int32_T iC[96])\n{\n  if (kDrop > 0) {\n    iA[iC[kDrop - 1] - 1] = false;\n    if (kDrop < *nA) {\n      for (int32_T i{kDrop}; i < *nA; i++) {\n        iC[i - 1] = iC[i];\n      }\n    }\n\n    iC[*nA - 1] = 0;\n    (*nA)--;\n  }\n}\n\n// Function for MATLAB Function: '<S35>/optimizer'\nvoid mpcACCsystem::mpcACCsystem_qpkwik(const real_T b_Linv[16], const real_T\n  b_Hinv[16], const real_T f[4], const real_T b_Ac[384], const real_T b[96],\n  boolean_T iA[96], int32_T maxiter, real_T FeasTol, real_T x[4], real_T lambda\n  [96], int32_T *status)\n{\n  real_T cTol[96];\n  real_T D[16];\n  real_T RLinv[16];\n  real_T U[16];\n  real_T b_H[16];\n  real_T Opt[8];\n  real_T Rhs[8];\n  real_T r[4];\n  real_T z[4];\n  real_T Xnorm0;\n  real_T cMin;\n  real_T cVal;\n  real_T rMin;\n  real_T t;\n  real_T zTa;\n  real_T zTa_tmp;\n  int32_T iC[96];\n  int32_T U_tmp;\n  int32_T U_tmp_0;\n  int32_T b_exponent;\n  int32_T exitg1;\n  int32_T exitg3;\n  int32_T exponent;\n  int32_T i;\n  int32_T iSave;\n  int32_T nA;\n  int32_T r_tmp;\n  int32_T tmp;\n  boolean_T ColdReset;\n  boolean_T DualFeasible;\n  boolean_T cTolComputed;\n  boolean_T exitg2;\n  boolean_T exitg4;\n  boolean_T guard1;\n  boolean_T guard2;\n  x[0] = 0.0;\n  x[1] = 0.0;\n  x[2] = 0.0;\n  x[3] = 0.0;\n  *status = 1;\n  r[0] = 0.0;\n  r[1] = 0.0;\n  r[2] = 0.0;\n  r[3] = 0.0;\n  rMin = 0.0;\n  cTolComputed = false;\n  for (i = 0; i < 96; i++) {\n    lambda[i] = 0.0;\n    cTol[i] = 1.0;\n    iC[i] = 0;\n  }\n\n  nA = 0;\n  for (i = 0; i < 96; i++) {\n    if (iA[i]) {\n      nA++;\n      iC[nA - 1] = i + 1;\n    }\n  }\n\n  guard1 = false;\n  if (nA > 0) {\n    std::memset(&Opt[0], 0, sizeof(real_T) << 3U);\n    Rhs[0] = f[0];\n    Rhs[4] = 0.0;\n    Rhs[1] = f[1];\n    Rhs[5] = 0.0;\n    Rhs[2] = f[2];\n    Rhs[6] = 0.0;\n    Rhs[3] = f[3];\n    Rhs[7] = 0.0;\n    DualFeasible = false;\n    tmp = static_cast<int32_T>(std::round(0.3 * static_cast<real_T>(nA)));\n    ColdReset = false;\n    do {\n      exitg3 = 0;\n      if ((!DualFeasible) && (nA > 0) && (*status <= maxiter)) {\n        mpcACCsystem_KWIKfactor(b_Ac, iC, nA, b_Linv, D, b_H,\n          mpcACCsystem_degrees, RLinv, &Xnorm0);\n        if (Xnorm0 < 0.0) {\n          if (ColdReset) {\n            *status = -2;\n            exitg3 = 2;\n          } else {\n            nA = 0;\n            std::memset(&iA[0], 0, 96U * sizeof(boolean_T));\n            std::memset(&iC[0], 0, 96U * sizeof(int32_T));\n            ColdReset = true;\n          }\n        } else {\n          for (i = 0; i < nA; i++) {\n            Rhs[i + 4] = b[iC[i] - 1];\n            for (r_tmp = i + 1; r_tmp <= nA; r_tmp++) {\n              U_tmp_0 = ((i << 2) + r_tmp) - 1;\n              U[U_tmp_0] = 0.0;\n              for (iSave = 0; iSave < nA; iSave++) {\n                U_tmp = iSave << 2;\n                U[U_tmp_0] += RLinv[(U_tmp + r_tmp) - 1] * RLinv[U_tmp + i];\n              }\n\n              U[i + ((r_tmp - 1) << 2)] = U[U_tmp_0];\n            }\n          }\n\n          for (i = 0; i < 4; i++) {\n            Opt[i] = ((b_H[i + 4] * Rhs[1] + b_H[i] * Rhs[0]) + b_H[i + 8] *\n                      Rhs[2]) + b_H[i + 12] * Rhs[3];\n            for (r_tmp = 0; r_tmp < nA; r_tmp++) {\n              Opt[i] += D[(r_tmp << 2) + i] * Rhs[r_tmp + 4];\n            }\n          }\n\n          Xnorm0 = -1.0E-12;\n          i = -1;\n          for (r_tmp = 0; r_tmp < nA; r_tmp++) {\n            iSave = r_tmp << 2;\n            Opt[r_tmp + 4] = ((D[iSave + 1] * Rhs[1] + D[iSave] * Rhs[0]) +\n                              D[iSave + 2] * Rhs[2]) + D[iSave + 3] * Rhs[3];\n            for (iSave = 0; iSave < nA; iSave++) {\n              Opt[r_tmp + 4] += U[(iSave << 2) + r_tmp] * Rhs[iSave + 4];\n            }\n\n            cMin = Opt[r_tmp + 4];\n            lambda[iC[r_tmp] - 1] = cMin;\n            if ((cMin < Xnorm0) && (r_tmp + 1 <= nA)) {\n              i = r_tmp;\n              Xnorm0 = cMin;\n            }\n          }\n\n          if (i + 1 <= 0) {\n            DualFeasible = true;\n            x[0] = Opt[0];\n            x[1] = Opt[1];\n            x[2] = Opt[2];\n            x[3] = Opt[3];\n          } else {\n            (*status)++;\n            if (tmp <= 5) {\n              r_tmp = 5;\n            } else {\n              r_tmp = tmp;\n            }\n\n            if (*status > r_tmp) {\n              nA = 0;\n              std::memset(&iA[0], 0, 96U * sizeof(boolean_T));\n              std::memset(&iC[0], 0, 96U * sizeof(int32_T));\n              ColdReset = true;\n            } else {\n              lambda[iC[i] - 1] = 0.0;\n              mpcACCsystem_DropConstraint(i + 1, iA, &nA, iC);\n            }\n          }\n        }\n      } else {\n        if (nA <= 0) {\n          std::memset(&lambda[0], 0, 96U * sizeof(real_T));\n          Xnorm0 = f[1];\n          cMin = f[0];\n          cVal = f[2];\n          t = f[3];\n          for (tmp = 0; tmp < 4; tmp++) {\n            x[tmp] = ((-b_Hinv[tmp + 4] * Xnorm0 + -b_Hinv[tmp] * cMin) +\n                      -b_Hinv[tmp + 8] * cVal) + -b_Hinv[tmp + 12] * t;\n          }\n        }\n\n        exitg3 = 1;\n      }\n    } while (exitg3 == 0);\n\n    if (exitg3 == 1) {\n      guard1 = true;\n    }\n  } else {\n    Xnorm0 = f[1];\n    cMin = f[0];\n    cVal = f[2];\n    t = f[3];\n    for (tmp = 0; tmp < 4; tmp++) {\n      x[tmp] = ((-b_Hinv[tmp + 4] * Xnorm0 + -b_Hinv[tmp] * cMin) + -b_Hinv[tmp\n                + 8] * cVal) + -b_Hinv[tmp + 12] * t;\n    }\n\n    guard1 = true;\n  }\n\n  if (guard1) {\n    Xnorm0 = mpcACCsystem_norm(x);\n    exitg2 = false;\n    while ((!exitg2) && (*status <= maxiter)) {\n      cMin = -FeasTol;\n      tmp = -1;\n      for (i = 0; i < 96; i++) {\n        if (!cTolComputed) {\n          z[0] = std::abs(b_Ac[i] * x[0]);\n          z[1] = std::abs(b_Ac[i + 96] * x[1]);\n          z[2] = std::abs(b_Ac[i + 192] * x[2]);\n          z[3] = std::abs(b_Ac[i + 288] * x[3]);\n          cTol[i] = std::fmax(cTol[i], mpcACCsystem_maximum(z));\n        }\n\n        if (!iA[i]) {\n          cVal = ((((b_Ac[i + 96] * x[1] + b_Ac[i] * x[0]) + b_Ac[i + 192] * x[2])\n                   + b_Ac[i + 288] * x[3]) - b[i]) / cTol[i];\n          if (cVal < cMin) {\n            cMin = cVal;\n            tmp = i;\n          }\n        }\n      }\n\n      cTolComputed = true;\n      if (tmp + 1 <= 0) {\n        exitg2 = true;\n      } else if (*status == maxiter) {\n        *status = 0;\n        exitg2 = true;\n      } else {\n        do {\n          exitg1 = 0;\n          if ((tmp + 1 > 0) && (*status <= maxiter)) {\n            guard2 = false;\n            if (nA == 0) {\n              for (r_tmp = 0; r_tmp < 4; r_tmp++) {\n                z[r_tmp] = ((b_Hinv[r_tmp + 4] * b_Ac[tmp + 96] + b_Hinv[r_tmp] *\n                             b_Ac[tmp]) + b_Hinv[r_tmp + 8] * b_Ac[tmp + 192]) +\n                  b_Hinv[r_tmp + 12] * b_Ac[tmp + 288];\n              }\n\n              guard2 = true;\n            } else {\n              mpcACCsystem_KWIKfactor(b_Ac, iC, nA, b_Linv, D, b_H,\n                mpcACCsystem_degrees, RLinv, &cMin);\n              if (cMin <= 0.0) {\n                *status = -2;\n                exitg1 = 1;\n              } else {\n                for (r_tmp = 0; r_tmp < 16; r_tmp++) {\n                  U[r_tmp] = -b_H[r_tmp];\n                }\n\n                for (r_tmp = 0; r_tmp < 4; r_tmp++) {\n                  z[r_tmp] = ((U[r_tmp + 4] * b_Ac[tmp + 96] + U[r_tmp] *\n                               b_Ac[tmp]) + U[r_tmp + 8] * b_Ac[tmp + 192]) +\n                    U[r_tmp + 12] * b_Ac[tmp + 288];\n                }\n\n                for (i = 0; i < nA; i++) {\n                  r_tmp = i << 2;\n                  r[i] = ((D[r_tmp + 1] * b_Ac[tmp + 96] + D[r_tmp] * b_Ac[tmp])\n                          + D[r_tmp + 2] * b_Ac[tmp + 192]) + D[r_tmp + 3] *\n                    b_Ac[tmp + 288];\n                }\n\n                guard2 = true;\n              }\n            }\n\n            if (guard2) {\n              i = 0;\n              cMin = 0.0;\n              DualFeasible = true;\n              ColdReset = true;\n              if (nA > 0) {\n                r_tmp = 0;\n                exitg4 = false;\n                while ((!exitg4) && (r_tmp <= nA - 1)) {\n                  if (r[r_tmp] >= 1.0E-12) {\n                    ColdReset = false;\n                    exitg4 = true;\n                  } else {\n                    r_tmp++;\n                  }\n                }\n              }\n\n              if ((nA != 0) && (!ColdReset)) {\n                for (r_tmp = 0; r_tmp < nA; r_tmp++) {\n                  cVal = r[r_tmp];\n                  if (cVal > 1.0E-12) {\n                    cVal = lambda[iC[r_tmp] - 1] / cVal;\n                    if ((i == 0) || (cVal < rMin)) {\n                      rMin = cVal;\n                      i = r_tmp + 1;\n                    }\n                  }\n                }\n\n                if (i > 0) {\n                  cMin = rMin;\n                  DualFeasible = false;\n                }\n              }\n\n              cVal = b_Ac[tmp + 96];\n              t = b_Ac[tmp + 192];\n              zTa_tmp = b_Ac[tmp + 288];\n              zTa = ((cVal * z[1] + z[0] * b_Ac[tmp]) + t * z[2]) + zTa_tmp * z\n                [3];\n              if (zTa <= 0.0) {\n                cVal = 0.0;\n                ColdReset = true;\n              } else {\n                cVal = (b[tmp] - (((cVal * x[1] + b_Ac[tmp] * x[0]) + t * x[2])\n                                  + zTa_tmp * x[3])) / zTa;\n                ColdReset = false;\n              }\n\n              if (DualFeasible && ColdReset) {\n                *status = -1;\n                exitg1 = 1;\n              } else {\n                if (ColdReset) {\n                  t = cMin;\n                } else if (DualFeasible) {\n                  t = cVal;\n                } else if (cMin < cVal) {\n                  t = cMin;\n                } else {\n                  t = cVal;\n                }\n\n                for (r_tmp = 0; r_tmp < nA; r_tmp++) {\n                  iSave = iC[r_tmp];\n                  lambda[iSave - 1] -= t * r[r_tmp];\n                  if ((iSave <= 96) && (lambda[iSave - 1] < 0.0)) {\n                    lambda[iSave - 1] = 0.0;\n                  }\n                }\n\n                lambda[tmp] += t;\n                std::frexp(1.0, &exponent);\n                if (std::abs(t - cMin) < 2.2204460492503131E-16) {\n                  mpcACCsystem_DropConstraint(i, iA, &nA, iC);\n                }\n\n                if (!ColdReset) {\n                  x[0] += t * z[0];\n                  x[1] += t * z[1];\n                  x[2] += t * z[2];\n                  x[3] += t * z[3];\n                  std::frexp(1.0, &b_exponent);\n                  if (std::abs(t - cVal) < 2.2204460492503131E-16) {\n                    if (nA == mpcACCsystem_degrees) {\n                      *status = -1;\n                      exitg1 = 1;\n                    } else {\n                      nA++;\n                      iC[nA - 1] = tmp + 1;\n                      i = nA - 1;\n                      exitg4 = false;\n                      while ((!exitg4) && (i + 1 > 1)) {\n                        r_tmp = iC[i - 1];\n                        if (iC[i] > r_tmp) {\n                          exitg4 = true;\n                        } else {\n                          iSave = iC[i];\n                          iC[i] = r_tmp;\n                          iC[i - 1] = iSave;\n                          i--;\n                        }\n                      }\n\n                      iA[tmp] = true;\n                      tmp = -1;\n                      (*status)++;\n                    }\n                  } else {\n                    (*status)++;\n                  }\n                } else {\n                  (*status)++;\n                }\n              }\n            }\n          } else {\n            cMin = mpcACCsystem_norm(x);\n            if (std::abs(cMin - Xnorm0) > 0.001) {\n              Xnorm0 = cMin;\n              for (tmp = 0; tmp < 96; tmp++) {\n                cTol[tmp] = std::fmax(std::abs(b[tmp]), 1.0);\n              }\n\n              cTolComputed = false;\n            }\n\n            exitg1 = 2;\n          }\n        } while (exitg1 == 0);\n\n        if (exitg1 == 1) {\n          exitg2 = true;\n        }\n      }\n    }\n  }\n}\n\n// Model step function\nvoid mpcACCsystem::step()\n{\n  // local block i/o variables\n  real_T rtb_y;\n  real_T rtb_y_b;\n  if ((&mpcACCsystem_M)->isMajorTimeStep()) {\n    // set solver stop time\n    rtsiSetSolverStopTime(&(&mpcACCsystem_M)->solverInfo,(((&mpcACCsystem_M)\n      ->Timing.clockTick0+1)*(&mpcACCsystem_M)->Timing.stepSize0));\n  }                                    // end MajorTimeStep\n\n  // Update absolute time of base rate at minor time step\n  if ((&mpcACCsystem_M)->isMinorTimeStep()) {\n    (&mpcACCsystem_M)->Timing.t[0] = rtsiGetT(&(&mpcACCsystem_M)->solverInfo);\n  }\n\n  {\n    real_T Bc[96];\n    real_T a__1[96];\n    real_T vseq[62];\n    real_T rseq[60];\n    real_T f[4];\n    real_T rtb_xest[4];\n    real_T xk[4];\n    real_T rtb_TmpSignalConversionAtSFun_e[2];\n    real_T y_innov[2];\n    real_T ymax_incr[2];\n    real_T ymin_incr[2];\n    real_T rtb_y_ds;\n    real_T rtb_y_fe;\n    real_T xk_0;\n    real_T xk_1;\n    real_T y;\n    real_T y_d;\n    real_T y_innov_0;\n    real_T y_innov_1;\n    real_T y_j;\n    real_T y_m;\n    int32_T d_i;\n    int32_T i;\n    int8_T rtb_TmpSignalConversionAtSFu_mm[2];\n    uint8_T b_Mrows;\n    boolean_T ymax_incr_flag[2];\n    boolean_T ymin_incr_flag[2];\n    boolean_T b_Del_Save_Flag0;\n    boolean_T tmp;\n    boolean_T umax_incr_flag;\n    boolean_T umin_incr_flag;\n    static const real_T f_a[8]{ -2.8913158861098121E-20, 0.0063245553203367423,\n      -2.1779195409073748E-5, -0.012649106890738636, 0.0282842628623524,\n      -9.7399522859880982E-6, 0.0, 1.0 };\n\n    static const real_T e_a[8]{ -0.28621232262067842, 0.59329074470859378,\n      3.6639065311833567, 0.0089491794894280257, 0.0032542098114138676,\n      -0.056579892681977516, -0.014230625940085229, 0.094687375766569978 };\n\n    static const real_T b_Mlim[96]{ 0.6, 0.6, 0.6, 0.6, 0.6, 0.6, 0.6, 0.6, 0.6,\n      0.6, 0.6, 0.6, 0.6, 0.6, 0.6, 0.6, 0.6, 0.6, 0.6, 0.6, 0.6, 0.6, 0.6, 0.6,\n      0.6, 0.6, 0.6, 0.6, 0.6, 0.6, 0.56, 0.4, 0.56, 0.4, 0.56, 0.4, 0.56, 0.4,\n      0.56, 0.4, 0.56, 0.4, 0.56, 0.4, 0.56, 0.4, 0.56, 0.4, 0.56, 0.4, 0.56,\n      0.4, 0.56, 0.4, 0.56, 0.4, 0.56, 0.4, 0.56, 0.4, 0.56, 0.4, 0.56, 0.4,\n      0.56, 0.4, 0.56, 0.4, 0.56, 0.4, 0.56, 0.4, 0.56, 0.4, 0.56, 0.4, 0.56,\n      0.4, 0.56, 0.4, 0.56, 0.4, 0.56, 0.4, 0.56, 0.4, 0.56, 0.4, 0.56, 0.4, 0.4,\n      0.4, 0.4, 0.6, 0.6, 0.6 };\n\n    static const real_T b_Mv[5952]{ -2.0328790734103208E-20,\n      -2.7105054312137611E-20, -2.7105054312137611E-20, -2.7105054312137611E-20,\n      -3.3881317890172014E-20, -4.0657581468206416E-20, -4.7433845046240819E-20,\n      -4.7433845046240819E-20, -4.0657581468206416E-20, -4.0657581468206416E-20,\n      -4.0657581468206416E-20, -5.4210108624275222E-20, -5.4210108624275222E-20,\n      -5.4210108624275222E-20, -5.4210108624275222E-20, -5.4210108624275222E-20,\n      -5.4210108624275222E-20, -5.4210108624275222E-20, -6.0986372202309624E-20,\n      -6.7762635780344027E-20, -6.0986372202309624E-20, -5.4210108624275222E-20,\n      -6.0986372202309624E-20, -5.4210108624275222E-20, -6.7762635780344027E-20,\n      -7.453889935837843E-20, -6.7762635780344027E-20, -6.7762635780344027E-20,\n      -8.1315162936412833E-20, -8.1315162936412833E-20, 0.099999999999999978,\n      2.0328790734103208E-20, 0.099999999999999964, 2.7105054312137611E-20,\n      0.09999999999999995, 2.7105054312137611E-20, 0.099999999999999936,\n      2.7105054312137611E-20, 0.099999999999999936, 3.3881317890172014E-20,\n      0.099999999999999922, 4.0657581468206416E-20, 0.099999999999999908,\n      4.7433845046240819E-20, 0.099999999999999908, 4.7433845046240819E-20,\n      0.0999999999999999, 4.0657581468206416E-20, 0.099999999999999881,\n      4.0657581468206416E-20, 0.099999999999999881, 4.0657581468206416E-20,\n      0.099999999999999867, 5.4210108624275222E-20, 0.099999999999999867,\n      5.4210108624275222E-20, 0.099999999999999853, 5.4210108624275222E-20,\n      0.099999999999999839, 5.4210108624275222E-20, 0.099999999999999825,\n      5.4210108624275222E-20, 0.099999999999999811, 5.4210108624275222E-20,\n      0.0999999999999998, 5.4210108624275222E-20, 0.099999999999999784,\n      6.0986372202309624E-20, 0.09999999999999977, 6.7762635780344027E-20,\n      0.099999999999999756, 6.0986372202309624E-20, 0.099999999999999756,\n      5.4210108624275222E-20, 0.099999999999999742, 6.0986372202309624E-20,\n      0.099999999999999728, 5.4210108624275222E-20, 0.099999999999999714,\n      6.7762635780344027E-20, 0.099999999999999714, 7.453889935837843E-20,\n      0.0999999999999997, 6.7762635780344027E-20, 0.099999999999999686,\n      6.7762635780344027E-20, 0.099999999999999659, 8.1315162936412833E-20,\n      0.099999999999999659, 8.1315162936412833E-20, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,\n      -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0,\n      -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0,\n      -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,\n      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,\n      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,\n      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,\n      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -0.0,\n      -2.0328790734103208E-20, -2.7105054312137611E-20, -2.7105054312137611E-20,\n      -2.7105054312137611E-20, -3.3881317890172014E-20, -4.0657581468206416E-20,\n      -4.7433845046240819E-20, -4.7433845046240819E-20, -4.0657581468206416E-20,\n      -4.0657581468206416E-20, -4.0657581468206416E-20, -5.4210108624275222E-20,\n      -5.4210108624275222E-20, -5.4210108624275222E-20, -5.4210108624275222E-20,\n      -5.4210108624275222E-20, -5.4210108624275222E-20, -5.4210108624275222E-20,\n      -6.0986372202309624E-20, -6.7762635780344027E-20, -6.0986372202309624E-20,\n      -5.4210108624275222E-20, -6.0986372202309624E-20, -5.4210108624275222E-20,\n      -6.7762635780344027E-20, -7.453889935837843E-20, -6.7762635780344027E-20,\n      -6.7762635780344027E-20, -8.1315162936412833E-20, 0.0, 0.0,\n      0.099999999999999978, 2.0328790734103208E-20, 0.099999999999999964,\n      2.7105054312137611E-20, 0.09999999999999995, 2.7105054312137611E-20,\n      0.099999999999999936, 2.7105054312137611E-20, 0.099999999999999936,\n      3.3881317890172014E-20, 0.099999999999999922, 4.0657581468206416E-20,\n      0.099999999999999908, 4.7433845046240819E-20, 0.099999999999999908,\n      4.7433845046240819E-20, 0.0999999999999999, 4.0657581468206416E-20,\n      0.099999999999999881, 4.0657581468206416E-20, 0.099999999999999881,\n      4.0657581468206416E-20, 0.099999999999999867, 5.4210108624275222E-20,\n      0.099999999999999867, 5.4210108624275222E-20, 0.099999999999999853,\n      5.4210108624275222E-20, 0.099999999999999839, 5.4210108624275222E-20,\n      0.099999999999999825, 5.4210108624275222E-20, 0.099999999999999811,\n      5.4210108624275222E-20, 0.0999999999999998, 5.4210108624275222E-20,\n      0.099999999999999784, 6.0986372202309624E-20, 0.09999999999999977,\n      6.7762635780344027E-20, 0.099999999999999756, 6.0986372202309624E-20,\n      0.099999999999999756, 5.4210108624275222E-20, 0.099999999999999742,\n      6.0986372202309624E-20, 0.099999999999999728, 5.4210108624275222E-20,\n      0.099999999999999714, 6.7762635780344027E-20, 0.099999999999999714,\n      7.453889935837843E-20, 0.0999999999999997, 6.7762635780344027E-20,\n      0.099999999999999686, 6.7762635780344027E-20, 0.099999999999999659,\n      8.1315162936412833E-20, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -0.0, -0.0, -0.0,\n      -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0,\n      -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0,\n      -0.0, -0.0, -0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,\n      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,\n      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,\n      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,\n      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -0.0, -0.0,\n      -2.0328790734103208E-20, -2.7105054312137611E-20, -2.7105054312137611E-20,\n      -2.7105054312137611E-20, -3.3881317890172014E-20, -4.0657581468206416E-20,\n      -4.7433845046240819E-20, -4.7433845046240819E-20, -4.0657581468206416E-20,\n      -4.0657581468206416E-20, -4.0657581468206416E-20, -5.4210108624275222E-20,\n      -5.4210108624275222E-20, -5.4210108624275222E-20, -5.4210108624275222E-20,\n      -5.4210108624275222E-20, -5.4210108624275222E-20, -5.4210108624275222E-20,\n      -6.0986372202309624E-20, -6.7762635780344027E-20, -6.0986372202309624E-20,\n      -5.4210108624275222E-20, -6.0986372202309624E-20, -5.4210108624275222E-20,\n      -6.7762635780344027E-20, -7.453889935837843E-20, -6.7762635780344027E-20,\n      -6.7762635780344027E-20, 0.0, 0.0, 0.0, 0.0, 0.099999999999999978,\n      2.0328790734103208E-20, 0.099999999999999964, 2.7105054312137611E-20,\n      0.09999999999999995, 2.7105054312137611E-20, 0.099999999999999936,\n      2.7105054312137611E-20, 0.099999999999999936, 3.3881317890172014E-20,\n      0.099999999999999922, 4.0657581468206416E-20, 0.099999999999999908,\n      4.7433845046240819E-20, 0.099999999999999908, 4.7433845046240819E-20,\n      0.0999999999999999, 4.0657581468206416E-20, 0.099999999999999881,\n      4.0657581468206416E-20, 0.099999999999999881, 4.0657581468206416E-20,\n      0.099999999999999867, 5.4210108624275222E-20, 0.099999999999999867,\n      5.4210108624275222E-20, 0.099999999999999853, 5.4210108624275222E-20,\n      0.099999999999999839, 5.4210108624275222E-20, 0.099999999999999825,\n      5.4210108624275222E-20, 0.099999999999999811, 5.4210108624275222E-20,\n      0.0999999999999998, 5.4210108624275222E-20, 0.099999999999999784,\n      6.0986372202309624E-20, 0.09999999999999977, 6.7762635780344027E-20,\n      0.099999999999999756, 6.0986372202309624E-20, 0.099999999999999756,\n      5.4210108624275222E-20, 0.099999999999999742, 6.0986372202309624E-20,\n      0.099999999999999728, 5.4210108624275222E-20, 0.099999999999999714,\n      6.7762635780344027E-20, 0.099999999999999714, 7.453889935837843E-20,\n      0.0999999999999997, 6.7762635780344027E-20, 0.099999999999999686,\n      6.7762635780344027E-20, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -0.0, -0.0, -0.0,\n      -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0,\n      -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0,\n      -0.0, -0.0, -0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,\n      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,\n      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,\n      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,\n      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -0.0, -0.0, -0.0,\n      -2.0328790734103208E-20, -2.7105054312137611E-20, -2.7105054312137611E-20,\n      -2.7105054312137611E-20, -3.3881317890172014E-20, -4.0657581468206416E-20,\n      -4.7433845046240819E-20, -4.7433845046240819E-20, -4.0657581468206416E-20,\n      -4.0657581468206416E-20, -4.0657581468206416E-20, -5.4210108624275222E-20,\n      -5.4210108624275222E-20, -5.4210108624275222E-20, -5.4210108624275222E-20,\n      -5.4210108624275222E-20, -5.4210108624275222E-20, -5.4210108624275222E-20,\n      -6.0986372202309624E-20, -6.7762635780344027E-20, -6.0986372202309624E-20,\n      -5.4210108624275222E-20, -6.0986372202309624E-20, -5.4210108624275222E-20,\n      -6.7762635780344027E-20, -7.453889935837843E-20, -6.7762635780344027E-20,\n      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.099999999999999978, 2.0328790734103208E-20,\n      0.099999999999999964, 2.7105054312137611E-20, 0.09999999999999995,\n      2.7105054312137611E-20, 0.099999999999999936, 2.7105054312137611E-20,\n      0.099999999999999936, 3.3881317890172014E-20, 0.099999999999999922,\n      4.0657581468206416E-20, 0.099999999999999908, 4.7433845046240819E-20,\n      0.099999999999999908, 4.7433845046240819E-20, 0.0999999999999999,\n      4.0657581468206416E-20, 0.099999999999999881, 4.0657581468206416E-20,\n      0.099999999999999881, 4.0657581468206416E-20, 0.099999999999999867,\n      5.4210108624275222E-20, 0.099999999999999867, 5.4210108624275222E-20,\n      0.099999999999999853, 5.4210108624275222E-20, 0.099999999999999839,\n      5.4210108624275222E-20, 0.099999999999999825, 5.4210108624275222E-20,\n      0.099999999999999811, 5.4210108624275222E-20, 0.0999999999999998,\n      5.4210108624275222E-20, 0.099999999999999784, 6.0986372202309624E-20,\n      0.09999999999999977, 6.7762635780344027E-20, 0.099999999999999756,\n      6.0986372202309624E-20, 0.099999999999999756, 5.4210108624275222E-20,\n      0.099999999999999742, 6.0986372202309624E-20, 0.099999999999999728,\n      5.4210108624275222E-20, 0.099999999999999714, 6.7762635780344027E-20,\n      0.099999999999999714, 7.453889935837843E-20, 0.0999999999999997,\n      6.7762635780344027E-20, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -0.0, -0.0, -0.0,\n      -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0,\n      -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0,\n      -0.0, -0.0, -0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,\n      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,\n      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,\n      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,\n      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -0.0, -0.0, -0.0, -0.0,\n      -2.0328790734103208E-20, -2.7105054312137611E-20, -2.7105054312137611E-20,\n      -2.7105054312137611E-20, -3.3881317890172014E-20, -4.0657581468206416E-20,\n      -4.7433845046240819E-20, -4.7433845046240819E-20, -4.0657581468206416E-20,\n      -4.0657581468206416E-20, -4.0657581468206416E-20, -5.4210108624275222E-20,\n      -5.4210108624275222E-20, -5.4210108624275222E-20, -5.4210108624275222E-20,\n      -5.4210108624275222E-20, -5.4210108624275222E-20, -5.4210108624275222E-20,\n      -6.0986372202309624E-20, -6.7762635780344027E-20, -6.0986372202309624E-20,\n      -5.4210108624275222E-20, -6.0986372202309624E-20, -5.4210108624275222E-20,\n      -6.7762635780344027E-20, -7.453889935837843E-20, 0.0, 0.0, 0.0, 0.0, 0.0,\n      0.0, 0.0, 0.0, 0.099999999999999978, 2.0328790734103208E-20,\n      0.099999999999999964, 2.7105054312137611E-20, 0.09999999999999995,\n      2.7105054312137611E-20, 0.099999999999999936, 2.7105054312137611E-20,\n      0.099999999999999936, 3.3881317890172014E-20, 0.099999999999999922,\n      4.0657581468206416E-20, 0.099999999999999908, 4.7433845046240819E-20,\n      0.099999999999999908, 4.7433845046240819E-20, 0.0999999999999999,\n      4.0657581468206416E-20, 0.099999999999999881, 4.0657581468206416E-20,\n      0.099999999999999881, 4.0657581468206416E-20, 0.099999999999999867,\n      5.4210108624275222E-20, 0.099999999999999867, 5.4210108624275222E-20,\n      0.099999999999999853, 5.4210108624275222E-20, 0.099999999999999839,\n      5.4210108624275222E-20, 0.099999999999999825, 5.4210108624275222E-20,\n      0.099999999999999811, 5.4210108624275222E-20, 0.0999999999999998,\n      5.4210108624275222E-20, 0.099999999999999784, 6.0986372202309624E-20,\n      0.09999999999999977, 6.7762635780344027E-20, 0.099999999999999756,\n      6.0986372202309624E-20, 0.099999999999999756, 5.4210108624275222E-20,\n      0.099999999999999742, 6.0986372202309624E-20, 0.099999999999999728,\n      5.4210108624275222E-20, 0.099999999999999714, 6.7762635780344027E-20,\n      0.099999999999999714, 7.453889935837843E-20, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,\n      -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0,\n      -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0,\n      -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,\n      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,\n      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,\n      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,\n      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -0.0,\n      -0.0, -0.0, -0.0, -0.0, -2.0328790734103208E-20, -2.7105054312137611E-20,\n      -2.7105054312137611E-20, -2.7105054312137611E-20, -3.3881317890172014E-20,\n      -4.0657581468206416E-20, -4.7433845046240819E-20, -4.7433845046240819E-20,\n      -4.0657581468206416E-20, -4.0657581468206416E-20, -4.0657581468206416E-20,\n      -5.4210108624275222E-20, -5.4210108624275222E-20, -5.4210108624275222E-20,\n      -5.4210108624275222E-20, -5.4210108624275222E-20, -5.4210108624275222E-20,\n      -5.4210108624275222E-20, -6.0986372202309624E-20, -6.7762635780344027E-20,\n      -6.0986372202309624E-20, -5.4210108624275222E-20, -6.0986372202309624E-20,\n      -5.4210108624275222E-20, -6.7762635780344027E-20, 0.0, 0.0, 0.0, 0.0, 0.0,\n      0.0, 0.0, 0.0, 0.0, 0.0, 0.099999999999999978, 2.0328790734103208E-20,\n      0.099999999999999964, 2.7105054312137611E-20, 0.09999999999999995,\n      2.7105054312137611E-20, 0.099999999999999936, 2.7105054312137611E-20,\n      0.099999999999999936, 3.3881317890172014E-20, 0.099999999999999922,\n      4.0657581468206416E-20, 0.099999999999999908, 4.7433845046240819E-20,\n      0.099999999999999908, 4.7433845046240819E-20, 0.0999999999999999,\n      4.0657581468206416E-20, 0.099999999999999881, 4.0657581468206416E-20,\n      0.099999999999999881, 4.0657581468206416E-20, 0.099999999999999867,\n      5.4210108624275222E-20, 0.099999999999999867, 5.4210108624275222E-20,\n      0.099999999999999853, 5.4210108624275222E-20, 0.099999999999999839,\n      5.4210108624275222E-20, 0.099999999999999825, 5.4210108624275222E-20,\n      0.099999999999999811, 5.4210108624275222E-20, 0.0999999999999998,\n      5.4210108624275222E-20, 0.099999999999999784, 6.0986372202309624E-20,\n      0.09999999999999977, 6.7762635780344027E-20, 0.099999999999999756,\n      6.0986372202309624E-20, 0.099999999999999756, 5.4210108624275222E-20,\n      0.099999999999999742, 6.0986372202309624E-20, 0.099999999999999728,\n      5.4210108624275222E-20, 0.099999999999999714, 6.7762635780344027E-20, 0.0,\n      0.0, 0.0, 0.0, 0.0, 0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0,\n      -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0,\n      -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, 0.0, 0.0, 0.0,\n      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,\n      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,\n      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,\n      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,\n      0.0, 0.0, 0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -2.0328790734103208E-20,\n      -2.7105054312137611E-20, -2.7105054312137611E-20, -2.7105054312137611E-20,\n      -3.3881317890172014E-20, -4.0657581468206416E-20, -4.7433845046240819E-20,\n      -4.7433845046240819E-20, -4.0657581468206416E-20, -4.0657581468206416E-20,\n      -4.0657581468206416E-20, -5.4210108624275222E-20, -5.4210108624275222E-20,\n      -5.4210108624275222E-20, -5.4210108624275222E-20, -5.4210108624275222E-20,\n      -5.4210108624275222E-20, -5.4210108624275222E-20, -6.0986372202309624E-20,\n      -6.7762635780344027E-20, -6.0986372202309624E-20, -5.4210108624275222E-20,\n      -6.0986372202309624E-20, -5.4210108624275222E-20, 0.0, 0.0, 0.0, 0.0, 0.0,\n      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.099999999999999978,\n      2.0328790734103208E-20, 0.099999999999999964, 2.7105054312137611E-20,\n      0.09999999999999995, 2.7105054312137611E-20, 0.099999999999999936,\n      2.7105054312137611E-20, 0.099999999999999936, 3.3881317890172014E-20,\n      0.099999999999999922, 4.0657581468206416E-20, 0.099999999999999908,\n      4.7433845046240819E-20, 0.099999999999999908, 4.7433845046240819E-20,\n      0.0999999999999999, 4.0657581468206416E-20, 0.099999999999999881,\n      4.0657581468206416E-20, 0.099999999999999881, 4.0657581468206416E-20,\n      0.099999999999999867, 5.4210108624275222E-20, 0.099999999999999867,\n      5.4210108624275222E-20, 0.099999999999999853, 5.4210108624275222E-20,\n      0.099999999999999839, 5.4210108624275222E-20, 0.099999999999999825,\n      5.4210108624275222E-20, 0.099999999999999811, 5.4210108624275222E-20,\n      0.0999999999999998, 5.4210108624275222E-20, 0.099999999999999784,\n      6.0986372202309624E-20, 0.09999999999999977, 6.7762635780344027E-20,\n      0.099999999999999756, 6.0986372202309624E-20, 0.099999999999999756,\n      5.4210108624275222E-20, 0.099999999999999742, 6.0986372202309624E-20,\n      0.099999999999999728, 5.4210108624275222E-20, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,\n      -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0,\n      -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0,\n      -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,\n      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,\n      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,\n      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,\n      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -0.0,\n      -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -2.0328790734103208E-20,\n      -2.7105054312137611E-20, -2.7105054312137611E-20, -2.7105054312137611E-20,\n      -3.3881317890172014E-20, -4.0657581468206416E-20, -4.7433845046240819E-20,\n      -4.7433845046240819E-20, -4.0657581468206416E-20, -4.0657581468206416E-20,\n      -4.0657581468206416E-20, -5.4210108624275222E-20, -5.4210108624275222E-20,\n      -5.4210108624275222E-20, -5.4210108624275222E-20, -5.4210108624275222E-20,\n      -5.4210108624275222E-20, -5.4210108624275222E-20, -6.0986372202309624E-20,\n      -6.7762635780344027E-20, -6.0986372202309624E-20, -5.4210108624275222E-20,\n      -6.0986372202309624E-20, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,\n      0.0, 0.0, 0.0, 0.0, 0.099999999999999978, 2.0328790734103208E-20,\n      0.099999999999999964, 2.7105054312137611E-20, 0.09999999999999995,\n      2.7105054312137611E-20, 0.099999999999999936, 2.7105054312137611E-20,\n      0.099999999999999936, 3.3881317890172014E-20, 0.099999999999999922,\n      4.0657581468206416E-20, 0.099999999999999908, 4.7433845046240819E-20,\n      0.099999999999999908, 4.7433845046240819E-20, 0.0999999999999999,\n      4.0657581468206416E-20, 0.099999999999999881, 4.0657581468206416E-20,\n      0.099999999999999881, 4.0657581468206416E-20, 0.099999999999999867,\n      5.4210108624275222E-20, 0.099999999999999867, 5.4210108624275222E-20,\n      0.099999999999999853, 5.4210108624275222E-20, 0.099999999999999839,\n      5.4210108624275222E-20, 0.099999999999999825, 5.4210108624275222E-20,\n      0.099999999999999811, 5.4210108624275222E-20, 0.0999999999999998,\n      5.4210108624275222E-20, 0.099999999999999784, 6.0986372202309624E-20,\n      0.09999999999999977, 6.7762635780344027E-20, 0.099999999999999756,\n      6.0986372202309624E-20, 0.099999999999999756, 5.4210108624275222E-20,\n      0.099999999999999742, 6.0986372202309624E-20, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,\n      -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0,\n      -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0,\n      -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,\n      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,\n      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,\n      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,\n      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -0.0,\n      -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -2.0328790734103208E-20,\n      -2.7105054312137611E-20, -2.7105054312137611E-20, -2.7105054312137611E-20,\n      -3.3881317890172014E-20, -4.0657581468206416E-20, -4.7433845046240819E-20,\n      -4.7433845046240819E-20, -4.0657581468206416E-20, -4.0657581468206416E-20,\n      -4.0657581468206416E-20, -5.4210108624275222E-20, -5.4210108624275222E-20,\n      -5.4210108624275222E-20, -5.4210108624275222E-20, -5.4210108624275222E-20,\n      -5.4210108624275222E-20, -5.4210108624275222E-20, -6.0986372202309624E-20,\n      -6.7762635780344027E-20, -6.0986372202309624E-20, -5.4210108624275222E-20,\n      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,\n      0.0, 0.099999999999999978, 2.0328790734103208E-20, 0.099999999999999964,\n      2.7105054312137611E-20, 0.09999999999999995, 2.7105054312137611E-20,\n      0.099999999999999936, 2.7105054312137611E-20, 0.099999999999999936,\n      3.3881317890172014E-20, 0.099999999999999922, 4.0657581468206416E-20,\n      0.099999999999999908, 4.7433845046240819E-20, 0.099999999999999908,\n      4.7433845046240819E-20, 0.0999999999999999, 4.0657581468206416E-20,\n      0.099999999999999881, 4.0657581468206416E-20, 0.099999999999999881,\n      4.0657581468206416E-20, 0.099999999999999867, 5.4210108624275222E-20,\n      0.099999999999999867, 5.4210108624275222E-20, 0.099999999999999853,\n      5.4210108624275222E-20, 0.099999999999999839, 5.4210108624275222E-20,\n      0.099999999999999825, 5.4210108624275222E-20, 0.099999999999999811,\n      5.4210108624275222E-20, 0.0999999999999998, 5.4210108624275222E-20,\n      0.099999999999999784, 6.0986372202309624E-20, 0.09999999999999977,\n      6.7762635780344027E-20, 0.099999999999999756, 6.0986372202309624E-20,\n      0.099999999999999756, 5.4210108624275222E-20, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,\n      -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0,\n      -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0,\n      -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,\n      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,\n      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,\n      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,\n      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -0.0,\n      -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -2.0328790734103208E-20,\n      -2.7105054312137611E-20, -2.7105054312137611E-20, -2.7105054312137611E-20,\n      -3.3881317890172014E-20, -4.0657581468206416E-20, -4.7433845046240819E-20,\n      -4.7433845046240819E-20, -4.0657581468206416E-20, -4.0657581468206416E-20,\n      -4.0657581468206416E-20, -5.4210108624275222E-20, -5.4210108624275222E-20,\n      -5.4210108624275222E-20, -5.4210108624275222E-20, -5.4210108624275222E-20,\n      -5.4210108624275222E-20, -5.4210108624275222E-20, -6.0986372202309624E-20,\n      -6.7762635780344027E-20, -6.0986372202309624E-20, 0.0, 0.0, 0.0, 0.0, 0.0,\n      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,\n      0.099999999999999978, 2.0328790734103208E-20, 0.099999999999999964,\n      2.7105054312137611E-20, 0.09999999999999995, 2.7105054312137611E-20,\n      0.099999999999999936, 2.7105054312137611E-20, 0.099999999999999936,\n      3.3881317890172014E-20, 0.099999999999999922, 4.0657581468206416E-20,\n      0.099999999999999908, 4.7433845046240819E-20, 0.099999999999999908,\n      4.7433845046240819E-20, 0.0999999999999999, 4.0657581468206416E-20,\n      0.099999999999999881, 4.0657581468206416E-20, 0.099999999999999881,\n      4.0657581468206416E-20, 0.099999999999999867, 5.4210108624275222E-20,\n      0.099999999999999867, 5.4210108624275222E-20, 0.099999999999999853,\n      5.4210108624275222E-20, 0.099999999999999839, 5.4210108624275222E-20,\n      0.099999999999999825, 5.4210108624275222E-20, 0.099999999999999811,\n      5.4210108624275222E-20, 0.0999999999999998, 5.4210108624275222E-20,\n      0.099999999999999784, 6.0986372202309624E-20, 0.09999999999999977,\n      6.7762635780344027E-20, 0.099999999999999756, 6.0986372202309624E-20, 0.0,\n      0.0, 0.0, 0.0, 0.0, 0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0,\n      -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0,\n      -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, 0.0, 0.0, 0.0,\n      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,\n      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,\n      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,\n      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,\n      0.0, 0.0, 0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0,\n      -2.0328790734103208E-20, -2.7105054312137611E-20, -2.7105054312137611E-20,\n      -2.7105054312137611E-20, -3.3881317890172014E-20, -4.0657581468206416E-20,\n      -4.7433845046240819E-20, -4.7433845046240819E-20, -4.0657581468206416E-20,\n      -4.0657581468206416E-20, -4.0657581468206416E-20, -5.4210108624275222E-20,\n      -5.4210108624275222E-20, -5.4210108624275222E-20, -5.4210108624275222E-20,\n      -5.4210108624275222E-20, -5.4210108624275222E-20, -5.4210108624275222E-20,\n      -6.0986372202309624E-20, -6.7762635780344027E-20, 0.0, 0.0, 0.0, 0.0, 0.0,\n      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,\n      0.099999999999999978, 2.0328790734103208E-20, 0.099999999999999964,\n      2.7105054312137611E-20, 0.09999999999999995, 2.7105054312137611E-20,\n      0.099999999999999936, 2.7105054312137611E-20, 0.099999999999999936,\n      3.3881317890172014E-20, 0.099999999999999922, 4.0657581468206416E-20,\n      0.099999999999999908, 4.7433845046240819E-20, 0.099999999999999908,\n      4.7433845046240819E-20, 0.0999999999999999, 4.0657581468206416E-20,\n      0.099999999999999881, 4.0657581468206416E-20, 0.099999999999999881,\n      4.0657581468206416E-20, 0.099999999999999867, 5.4210108624275222E-20,\n      0.099999999999999867, 5.4210108624275222E-20, 0.099999999999999853,\n      5.4210108624275222E-20, 0.099999999999999839, 5.4210108624275222E-20,\n      0.099999999999999825, 5.4210108624275222E-20, 0.099999999999999811,\n      5.4210108624275222E-20, 0.0999999999999998, 5.4210108624275222E-20,\n      0.099999999999999784, 6.0986372202309624E-20, 0.09999999999999977,\n      6.7762635780344027E-20, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -0.0, -0.0, -0.0,\n      -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0,\n      -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0,\n      -0.0, -0.0, -0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,\n      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,\n      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,\n      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,\n      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -0.0, -0.0, -0.0, -0.0,\n      -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -2.0328790734103208E-20,\n      -2.7105054312137611E-20, -2.7105054312137611E-20, -2.7105054312137611E-20,\n      -3.3881317890172014E-20, -4.0657581468206416E-20, -4.7433845046240819E-20,\n      -4.7433845046240819E-20, -4.0657581468206416E-20, -4.0657581468206416E-20,\n      -4.0657581468206416E-20, -5.4210108624275222E-20, -5.4210108624275222E-20,\n      -5.4210108624275222E-20, -5.4210108624275222E-20, -5.4210108624275222E-20,\n      -5.4210108624275222E-20, -5.4210108624275222E-20, -6.0986372202309624E-20,\n      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,\n      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.099999999999999978,\n      2.0328790734103208E-20, 0.099999999999999964, 2.7105054312137611E-20,\n      0.09999999999999995, 2.7105054312137611E-20, 0.099999999999999936,\n      2.7105054312137611E-20, 0.099999999999999936, 3.3881317890172014E-20,\n      0.099999999999999922, 4.0657581468206416E-20, 0.099999999999999908,\n      4.7433845046240819E-20, 0.099999999999999908, 4.7433845046240819E-20,\n      0.0999999999999999, 4.0657581468206416E-20, 0.099999999999999881,\n      4.0657581468206416E-20, 0.099999999999999881, 4.0657581468206416E-20,\n      0.099999999999999867, 5.4210108624275222E-20, 0.099999999999999867,\n      5.4210108624275222E-20, 0.099999999999999853, 5.4210108624275222E-20,\n      0.099999999999999839, 5.4210108624275222E-20, 0.099999999999999825,\n      5.4210108624275222E-20, 0.099999999999999811, 5.4210108624275222E-20,\n      0.0999999999999998, 5.4210108624275222E-20, 0.099999999999999784,\n      6.0986372202309624E-20, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -0.0, -0.0, -0.0,\n      -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0,\n      -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0,\n      -0.0, -0.0, -0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,\n      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,\n      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,\n      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,\n      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -0.0, -0.0, -0.0, -0.0,\n      -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -2.0328790734103208E-20,\n      -2.7105054312137611E-20, -2.7105054312137611E-20, -2.7105054312137611E-20,\n      -3.3881317890172014E-20, -4.0657581468206416E-20, -4.7433845046240819E-20,\n      -4.7433845046240819E-20, -4.0657581468206416E-20, -4.0657581468206416E-20,\n      -4.0657581468206416E-20, -5.4210108624275222E-20, -5.4210108624275222E-20,\n      -5.4210108624275222E-20, -5.4210108624275222E-20, -5.4210108624275222E-20,\n      -5.4210108624275222E-20, -5.4210108624275222E-20, 0.0, 0.0, 0.0, 0.0, 0.0,\n      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,\n      0.0, 0.0, 0.0, 0.0, 0.099999999999999978, 2.0328790734103208E-20,\n      0.099999999999999964, 2.7105054312137611E-20, 0.09999999999999995,\n      2.7105054312137611E-20, 0.099999999999999936, 2.7105054312137611E-20,\n      0.099999999999999936, 3.3881317890172014E-20, 0.099999999999999922,\n      4.0657581468206416E-20, 0.099999999999999908, 4.7433845046240819E-20,\n      0.099999999999999908, 4.7433845046240819E-20, 0.0999999999999999,\n      4.0657581468206416E-20, 0.099999999999999881, 4.0657581468206416E-20,\n      0.099999999999999881, 4.0657581468206416E-20, 0.099999999999999867,\n      5.4210108624275222E-20, 0.099999999999999867, 5.4210108624275222E-20,\n      0.099999999999999853, 5.4210108624275222E-20, 0.099999999999999839,\n      5.4210108624275222E-20, 0.099999999999999825, 5.4210108624275222E-20,\n      0.099999999999999811, 5.4210108624275222E-20, 0.0999999999999998,\n      5.4210108624275222E-20, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -0.0, -0.0, -0.0,\n      -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0,\n      -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0,\n      -0.0, -0.0, -0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,\n      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,\n      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,\n      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,\n      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -0.0, -0.0, -0.0, -0.0,\n      -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0,\n      -2.0328790734103208E-20, -2.7105054312137611E-20, -2.7105054312137611E-20,\n      -2.7105054312137611E-20, -3.3881317890172014E-20, -4.0657581468206416E-20,\n      -4.7433845046240819E-20, -4.7433845046240819E-20, -4.0657581468206416E-20,\n      -4.0657581468206416E-20, -4.0657581468206416E-20, -5.4210108624275222E-20,\n      -5.4210108624275222E-20, -5.4210108624275222E-20, -5.4210108624275222E-20,\n      -5.4210108624275222E-20, -5.4210108624275222E-20, 0.0, 0.0, 0.0, 0.0, 0.0,\n      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,\n      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.099999999999999978, 2.0328790734103208E-20,\n      0.099999999999999964, 2.7105054312137611E-20, 0.09999999999999995,\n      2.7105054312137611E-20, 0.099999999999999936, 2.7105054312137611E-20,\n      0.099999999999999936, 3.3881317890172014E-20, 0.099999999999999922,\n      4.0657581468206416E-20, 0.099999999999999908, 4.7433845046240819E-20,\n      0.099999999999999908, 4.7433845046240819E-20, 0.0999999999999999,\n      4.0657581468206416E-20, 0.099999999999999881, 4.0657581468206416E-20,\n      0.099999999999999881, 4.0657581468206416E-20, 0.099999999999999867,\n      5.4210108624275222E-20, 0.099999999999999867, 5.4210108624275222E-20,\n      0.099999999999999853, 5.4210108624275222E-20, 0.099999999999999839,\n      5.4210108624275222E-20, 0.099999999999999825, 5.4210108624275222E-20,\n      0.099999999999999811, 5.4210108624275222E-20, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,\n      -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0,\n      -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0,\n      -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,\n      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,\n      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,\n      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,\n      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -0.0,\n      -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0,\n      -0.0, -2.0328790734103208E-20, -2.7105054312137611E-20,\n      -2.7105054312137611E-20, -2.7105054312137611E-20, -3.3881317890172014E-20,\n      -4.0657581468206416E-20, -4.7433845046240819E-20, -4.7433845046240819E-20,\n      -4.0657581468206416E-20, -4.0657581468206416E-20, -4.0657581468206416E-20,\n      -5.4210108624275222E-20, -5.4210108624275222E-20, -5.4210108624275222E-20,\n      -5.4210108624275222E-20, -5.4210108624275222E-20, 0.0, 0.0, 0.0, 0.0, 0.0,\n      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,\n      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.099999999999999978,\n      2.0328790734103208E-20, 0.099999999999999964, 2.7105054312137611E-20,\n      0.09999999999999995, 2.7105054312137611E-20, 0.099999999999999936,\n      2.7105054312137611E-20, 0.099999999999999936, 3.3881317890172014E-20,\n      0.099999999999999922, 4.0657581468206416E-20, 0.099999999999999908,\n      4.7433845046240819E-20, 0.099999999999999908, 4.7433845046240819E-20,\n      0.0999999999999999, 4.0657581468206416E-20, 0.099999999999999881,\n      4.0657581468206416E-20, 0.099999999999999881, 4.0657581468206416E-20,\n      0.099999999999999867, 5.4210108624275222E-20, 0.099999999999999867,\n      5.4210108624275222E-20, 0.099999999999999853, 5.4210108624275222E-20,\n      0.099999999999999839, 5.4210108624275222E-20, 0.099999999999999825,\n      5.4210108624275222E-20, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -0.0, -0.0, -0.0,\n      -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0,\n      -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0,\n      -0.0, -0.0, -0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,\n      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,\n      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,\n      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,\n      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -0.0, -0.0, -0.0, -0.0,\n      -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0,\n      -2.0328790734103208E-20, -2.7105054312137611E-20, -2.7105054312137611E-20,\n      -2.7105054312137611E-20, -3.3881317890172014E-20, -4.0657581468206416E-20,\n      -4.7433845046240819E-20, -4.7433845046240819E-20, -4.0657581468206416E-20,\n      -4.0657581468206416E-20, -4.0657581468206416E-20, -5.4210108624275222E-20,\n      -5.4210108624275222E-20, -5.4210108624275222E-20, -5.4210108624275222E-20,\n      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,\n      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,\n      0.099999999999999978, 2.0328790734103208E-20, 0.099999999999999964,\n      2.7105054312137611E-20, 0.09999999999999995, 2.7105054312137611E-20,\n      0.099999999999999936, 2.7105054312137611E-20, 0.099999999999999936,\n      3.3881317890172014E-20, 0.099999999999999922, 4.0657581468206416E-20,\n      0.099999999999999908, 4.7433845046240819E-20, 0.099999999999999908,\n      4.7433845046240819E-20, 0.0999999999999999, 4.0657581468206416E-20,\n      0.099999999999999881, 4.0657581468206416E-20, 0.099999999999999881,\n      4.0657581468206416E-20, 0.099999999999999867, 5.4210108624275222E-20,\n      0.099999999999999867, 5.4210108624275222E-20, 0.099999999999999853,\n      5.4210108624275222E-20, 0.099999999999999839, 5.4210108624275222E-20, 0.0,\n      0.0, 0.0, 0.0, 0.0, 0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0,\n      -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0,\n      -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, 0.0, 0.0, 0.0,\n      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,\n      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,\n      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,\n      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,\n      0.0, 0.0, 0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0,\n      -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -2.0328790734103208E-20,\n      -2.7105054312137611E-20, -2.7105054312137611E-20, -2.7105054312137611E-20,\n      -3.3881317890172014E-20, -4.0657581468206416E-20, -4.7433845046240819E-20,\n      -4.7433845046240819E-20, -4.0657581468206416E-20, -4.0657581468206416E-20,\n      -4.0657581468206416E-20, -5.4210108624275222E-20, -5.4210108624275222E-20,\n      -5.4210108624275222E-20, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,\n      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,\n      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.099999999999999978,\n      2.0328790734103208E-20, 0.099999999999999964, 2.7105054312137611E-20,\n      0.09999999999999995, 2.7105054312137611E-20, 0.099999999999999936,\n      2.7105054312137611E-20, 0.099999999999999936, 3.3881317890172014E-20,\n      0.099999999999999922, 4.0657581468206416E-20, 0.099999999999999908,\n      4.7433845046240819E-20, 0.099999999999999908, 4.7433845046240819E-20,\n      0.0999999999999999, 4.0657581468206416E-20, 0.099999999999999881,\n      4.0657581468206416E-20, 0.099999999999999881, 4.0657581468206416E-20,\n      0.099999999999999867, 5.4210108624275222E-20, 0.099999999999999867,\n      5.4210108624275222E-20, 0.099999999999999853, 5.4210108624275222E-20, 0.0,\n      0.0, 0.0, 0.0, 0.0, 0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0,\n      -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0,\n      -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, 0.0, 0.0, 0.0,\n      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,\n      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,\n      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,\n      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,\n      0.0, 0.0, 0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0,\n      -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -2.0328790734103208E-20,\n      -2.7105054312137611E-20, -2.7105054312137611E-20, -2.7105054312137611E-20,\n      -3.3881317890172014E-20, -4.0657581468206416E-20, -4.7433845046240819E-20,\n      -4.7433845046240819E-20, -4.0657581468206416E-20, -4.0657581468206416E-20,\n      -4.0657581468206416E-20, -5.4210108624275222E-20, -5.4210108624275222E-20,\n      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,\n      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,\n      0.0, 0.0, 0.0, 0.0, 0.099999999999999978, 2.0328790734103208E-20,\n      0.099999999999999964, 2.7105054312137611E-20, 0.09999999999999995,\n      2.7105054312137611E-20, 0.099999999999999936, 2.7105054312137611E-20,\n      0.099999999999999936, 3.3881317890172014E-20, 0.099999999999999922,\n      4.0657581468206416E-20, 0.099999999999999908, 4.7433845046240819E-20,\n      0.099999999999999908, 4.7433845046240819E-20, 0.0999999999999999,\n      4.0657581468206416E-20, 0.099999999999999881, 4.0657581468206416E-20,\n      0.099999999999999881, 4.0657581468206416E-20, 0.099999999999999867,\n      5.4210108624275222E-20, 0.099999999999999867, 5.4210108624275222E-20, 0.0,\n      0.0, 0.0, 0.0, 0.0, 0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0,\n      -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0,\n      -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, 0.0, 0.0, 0.0,\n      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,\n      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,\n      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,\n      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,\n      0.0, 0.0, 0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0,\n      -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -2.0328790734103208E-20,\n      -2.7105054312137611E-20, -2.7105054312137611E-20, -2.7105054312137611E-20,\n      -3.3881317890172014E-20, -4.0657581468206416E-20, -4.7433845046240819E-20,\n      -4.7433845046240819E-20, -4.0657581468206416E-20, -4.0657581468206416E-20,\n      -4.0657581468206416E-20, -5.4210108624275222E-20, 0.0, 0.0, 0.0, 0.0, 0.0,\n      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,\n      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,\n      0.0, 0.099999999999999978, 2.0328790734103208E-20, 0.099999999999999964,\n      2.7105054312137611E-20, 0.09999999999999995, 2.7105054312137611E-20,\n      0.099999999999999936, 2.7105054312137611E-20, 0.099999999999999936,\n      3.3881317890172014E-20, 0.099999999999999922, 4.0657581468206416E-20,\n      0.099999999999999908, 4.7433845046240819E-20, 0.099999999999999908,\n      4.7433845046240819E-20, 0.0999999999999999, 4.0657581468206416E-20,\n      0.099999999999999881, 4.0657581468206416E-20, 0.099999999999999881,\n      4.0657581468206416E-20, 0.099999999999999867, 5.4210108624275222E-20, 0.0,\n      0.0, 0.0, 0.0, 0.0, 0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0,\n      -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0,\n      -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, 0.0, 0.0, 0.0,\n      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,\n      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,\n      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,\n      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,\n      0.0, 0.0, 0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0,\n      -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0,\n      -2.0328790734103208E-20, -2.7105054312137611E-20, -2.7105054312137611E-20,\n      -2.7105054312137611E-20, -3.3881317890172014E-20, -4.0657581468206416E-20,\n      -4.7433845046240819E-20, -4.7433845046240819E-20, -4.0657581468206416E-20,\n      -4.0657581468206416E-20, -4.0657581468206416E-20, 0.0, 0.0, 0.0, 0.0, 0.0,\n      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,\n      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,\n      0.0, 0.0, 0.0, 0.099999999999999978, 2.0328790734103208E-20,\n      0.099999999999999964, 2.7105054312137611E-20, 0.09999999999999995,\n      2.7105054312137611E-20, 0.099999999999999936, 2.7105054312137611E-20,\n      0.099999999999999936, 3.3881317890172014E-20, 0.099999999999999922,\n      4.0657581468206416E-20, 0.099999999999999908, 4.7433845046240819E-20,\n      0.099999999999999908, 4.7433845046240819E-20, 0.0999999999999999,\n      4.0657581468206416E-20, 0.099999999999999881, 4.0657581468206416E-20,\n      0.099999999999999881, 4.0657581468206416E-20, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,\n      -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0,\n      -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0,\n      -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,\n      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,\n      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,\n      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,\n      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -0.0,\n      -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0,\n      -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -2.0328790734103208E-20,\n      -2.7105054312137611E-20, -2.7105054312137611E-20, -2.7105054312137611E-20,\n      -3.3881317890172014E-20, -4.0657581468206416E-20, -4.7433845046240819E-20,\n      -4.7433845046240819E-20, -4.0657581468206416E-20, -4.0657581468206416E-20,\n      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,\n      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,\n      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.099999999999999978,\n      2.0328790734103208E-20, 0.099999999999999964, 2.7105054312137611E-20,\n      0.09999999999999995, 2.7105054312137611E-20, 0.099999999999999936,\n      2.7105054312137611E-20, 0.099999999999999936, 3.3881317890172014E-20,\n      0.099999999999999922, 4.0657581468206416E-20, 0.099999999999999908,\n      4.7433845046240819E-20, 0.099999999999999908, 4.7433845046240819E-20,\n      0.0999999999999999, 4.0657581468206416E-20, 0.099999999999999881,\n      4.0657581468206416E-20, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -0.0, -0.0, -0.0,\n      -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0,\n      -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0,\n      -0.0, -0.0, -0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,\n      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,\n      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,\n      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,\n      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -0.0, -0.0, -0.0, -0.0,\n      -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0,\n      -0.0, -0.0, -0.0, -0.0, -0.0, -2.0328790734103208E-20,\n      -2.7105054312137611E-20, -2.7105054312137611E-20, -2.7105054312137611E-20,\n      -3.3881317890172014E-20, -4.0657581468206416E-20, -4.7433845046240819E-20,\n      -4.7433845046240819E-20, -4.0657581468206416E-20, 0.0, 0.0, 0.0, 0.0, 0.0,\n      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,\n      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,\n      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.099999999999999978,\n      2.0328790734103208E-20, 0.099999999999999964, 2.7105054312137611E-20,\n      0.09999999999999995, 2.7105054312137611E-20, 0.099999999999999936,\n      2.7105054312137611E-20, 0.099999999999999936, 3.3881317890172014E-20,\n      0.099999999999999922, 4.0657581468206416E-20, 0.099999999999999908,\n      4.7433845046240819E-20, 0.099999999999999908, 4.7433845046240819E-20,\n      0.0999999999999999, 4.0657581468206416E-20, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,\n      -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0,\n      -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0,\n      -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,\n      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,\n      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,\n      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,\n      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -0.0,\n      -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0,\n      -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0,\n      -2.0328790734103208E-20, -2.7105054312137611E-20, -2.7105054312137611E-20,\n      -2.7105054312137611E-20, -3.3881317890172014E-20, -4.0657581468206416E-20,\n      -4.7433845046240819E-20, -4.7433845046240819E-20, 0.0, 0.0, 0.0, 0.0, 0.0,\n      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,\n      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,\n      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.099999999999999978,\n      2.0328790734103208E-20, 0.099999999999999964, 2.7105054312137611E-20,\n      0.09999999999999995, 2.7105054312137611E-20, 0.099999999999999936,\n      2.7105054312137611E-20, 0.099999999999999936, 3.3881317890172014E-20,\n      0.099999999999999922, 4.0657581468206416E-20, 0.099999999999999908,\n      4.7433845046240819E-20, 0.099999999999999908, 4.7433845046240819E-20, 0.0,\n      0.0, 0.0, 0.0, 0.0, 0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0,\n      -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0,\n      -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, 0.0, 0.0, 0.0,\n      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,\n      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,\n      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,\n      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,\n      0.0, 0.0, 0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0,\n      -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0,\n      -0.0, -2.0328790734103208E-20, -2.7105054312137611E-20,\n      -2.7105054312137611E-20, -2.7105054312137611E-20, -3.3881317890172014E-20,\n      -4.0657581468206416E-20, -4.7433845046240819E-20, 0.0, 0.0, 0.0, 0.0, 0.0,\n      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,\n      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,\n      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,\n      0.099999999999999978, 2.0328790734103208E-20, 0.099999999999999964,\n      2.7105054312137611E-20, 0.09999999999999995, 2.7105054312137611E-20,\n      0.099999999999999936, 2.7105054312137611E-20, 0.099999999999999936,\n      3.3881317890172014E-20, 0.099999999999999922, 4.0657581468206416E-20,\n      0.099999999999999908, 4.7433845046240819E-20, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,\n      -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0,\n      -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0,\n      -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,\n      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,\n      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,\n      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,\n      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -0.0,\n      -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0,\n      -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0,\n      -2.0328790734103208E-20, -2.7105054312137611E-20, -2.7105054312137611E-20,\n      -2.7105054312137611E-20, -3.3881317890172014E-20, -4.0657581468206416E-20,\n      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,\n      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,\n      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,\n      0.0, 0.0, 0.0, 0.099999999999999978, 2.0328790734103208E-20,\n      0.099999999999999964, 2.7105054312137611E-20, 0.09999999999999995,\n      2.7105054312137611E-20, 0.099999999999999936, 2.7105054312137611E-20,\n      0.099999999999999936, 3.3881317890172014E-20, 0.099999999999999922,\n      4.0657581468206416E-20, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -0.0, -0.0, -0.0,\n      -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0,\n      -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0,\n      -0.0, -0.0, -0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,\n      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,\n      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,\n      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,\n      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -0.0, -0.0, -0.0, -0.0,\n      -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0,\n      -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0,\n      -2.0328790734103208E-20, -2.7105054312137611E-20, -2.7105054312137611E-20,\n      -2.7105054312137611E-20, -3.3881317890172014E-20, 0.0, 0.0, 0.0, 0.0, 0.0,\n      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,\n      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,\n      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,\n      0.099999999999999978, 2.0328790734103208E-20, 0.099999999999999964,\n      2.7105054312137611E-20, 0.09999999999999995, 2.7105054312137611E-20,\n      0.099999999999999936, 2.7105054312137611E-20, 0.099999999999999936,\n      3.3881317890172014E-20, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -0.0, -0.0, -0.0,\n      -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0,\n      -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0,\n      -0.0, -0.0, -0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,\n      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,\n      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,\n      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,\n      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -0.0, -0.0, -0.0, -0.0,\n      -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0,\n      -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0,\n      -2.0328790734103208E-20, -2.7105054312137611E-20, -2.7105054312137611E-20,\n      -2.7105054312137611E-20, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,\n      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,\n      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,\n      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,\n      0.099999999999999978, 2.0328790734103208E-20, 0.099999999999999964,\n      2.7105054312137611E-20, 0.09999999999999995, 2.7105054312137611E-20,\n      0.099999999999999936, 2.7105054312137611E-20, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,\n      -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0,\n      -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0,\n      -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,\n      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,\n      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,\n      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,\n      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -0.0,\n      -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0,\n      -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0,\n      -0.0, -0.0, -2.0328790734103208E-20, -2.7105054312137611E-20,\n      -2.7105054312137611E-20, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,\n      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,\n      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,\n      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,\n      0.099999999999999978, 2.0328790734103208E-20, 0.099999999999999964,\n      2.7105054312137611E-20, 0.09999999999999995, 2.7105054312137611E-20, 0.0,\n      0.0, 0.0, 0.0, 0.0, 0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0,\n      -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0,\n      -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, 0.0, 0.0, 0.0,\n      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,\n      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,\n      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,\n      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,\n      0.0, 0.0, 0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0,\n      -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0,\n      -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -2.0328790734103208E-20,\n      -2.7105054312137611E-20, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,\n      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,\n      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,\n      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,\n      0.0, 0.099999999999999978, 2.0328790734103208E-20, 0.099999999999999964,\n      2.7105054312137611E-20, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -0.0, -0.0, -0.0,\n      -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0,\n      -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0,\n      -0.0, -0.0, -0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,\n      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,\n      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,\n      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,\n      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -0.0, -0.0, -0.0, -0.0,\n      -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0,\n      -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0,\n      -0.0, -2.0328790734103208E-20, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,\n      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,\n      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,\n      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,\n      0.0, 0.0, 0.0, 0.0, 0.099999999999999978, 2.0328790734103208E-20, 0.0, 0.0,\n      0.0, 0.0, 0.0, 0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0,\n      -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0,\n      -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, 0.0, 0.0, 0.0, 0.0,\n      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,\n      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,\n      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,\n      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,\n      0.0, 0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0,\n      -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0,\n      -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,\n      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,\n      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,\n      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,\n      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,\n      -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0,\n      -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0,\n      -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,\n      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,\n      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,\n      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,\n      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 };\n\n    static const real_T b_Mx[384]{ -0.0051781079403026538,\n      -0.0042394762134830653, -0.0034709895529211774, -0.0028418058905889595,\n      -0.0023266738769033403, -0.0019049194554039356, -0.0015596161402757595,\n      -0.0012769056970405443, -0.0010454419629475661, -0.00085593548562338053,\n      -0.00070078070473059454, -0.0005737507141265946, -0.00046974735425589281,\n      -0.00038459660510631273, -0.00031488106812992269, -0.000257802814040007,\n      -0.00021107109208459395, -0.00017281039417540775, -0.00014148518416293054,\n      -0.00011583827137908915, -9.4840355161449356E-5, -7.7648715403512756E-5,\n      -6.3573391237851953E-5, -5.2049490483883769E-5, -4.2614518541191467E-5,\n      -3.4889816857281371E-5, -2.8565366030310904E-5, -2.3387343641940707E-5,\n      -1.9147937472455725E-5, -1.5677005266709844E-5, -0.00057322369001704143,\n      0.0051781079403026538, -0.0010425395534268329, 0.0042394762134830653,\n      -0.0014267828837077742, 0.0034709895529211774, -0.0017413747148738808,\n      0.0028418058905889595, -0.001998940721716688, 0.0023266738769033403,\n      -0.0022098179324663877, 0.0019049194554039356, -0.0023824695900304732,\n      0.0015596161402757595, -0.0025238248116480782, 0.0012769056970405443,\n      -0.0026395566786945645, 0.0010454419629475661, -0.0027343099173566545,\n      0.00085593548562338053, -0.0028118873078030451, 0.00070078070473059454,\n      -0.0028754023031050428, 0.0005737507141265946, -0.0029274039830403916,\n      0.00046974735425589281, -0.0029699793576151794, 0.00038459660510631273,\n      -0.0030048371261033719, 0.00031488106812992269, -0.0030333762531483273,\n      0.000257802814040007, -0.003056742114126031, 0.00021107109208459395,\n      -0.0030758724630806219, 0.00017281039417540775, -0.0030915350680868576,\n      0.00014148518416293054, -0.0031043585244787762, 0.00011583827137908915,\n      -0.0031148574825875935, 9.4840355161449356E-5, -0.0031234533024665592,\n      7.7648715403512756E-5, -0.0031304909645493871, 6.3573391237851953E-5,\n      -0.003136252914926369, 5.2049490483883769E-5, -0.0031409704008977125,\n      4.2614518541191467E-5, -0.0031448327517396651, 3.4889816857281371E-5,\n      -0.0031479949771531478, 2.8565366030310904E-5, -0.00315058398834733,\n      2.3387343641940707E-5, -0.00315270369143207, 1.9147937472455725E-5,\n      -0.00315443915753494, 1.5677005266709844E-5, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,\n      0.013222330410818706, 0.013691646135095874, 0.014075889351464657,\n      0.014390481089367378, 0.014648047019852584, 0.014858924168085968,\n      0.015031575774466021, 0.015172930954177686, 0.01528866278691449,\n      0.01538341599748619, 0.015460993364934115, 0.01552450834140656,\n      0.015576510005925576, 0.015619085367878538, 0.015653943126032854,\n      0.015682482244617147, 0.015705848098667846, 0.015724978441951087,\n      0.015740641042314017, 0.015753464494904314, 0.015763963449900626,\n      0.015772559267231291, 0.015779596927227746, 0.015785358875896553,\n      0.015790076360469363, 0.015793938710166291, 0.015797100934642306,\n      0.015799689945068959, 0.015801809647525297, 0.015803545113113673,\n      0.0012727474058932024, -0.013222330410818706, 0.0026192279050969297,\n      -0.013691646135095874, 0.0040082446582548484, -0.014075889351464657,\n      0.0054320871506457992, -0.014390481089367378, 0.0068844425467455067,\n      -0.014648047019852584, 0.008360142333971126, -0.014858924168085968,\n      0.009854954892123409, -0.015031575774466021, 0.011365415663609886,\n      -0.015172930954177686, 0.012888688108583794, -0.01528866278691449,\n      0.014422449864640252, -0.01538341599748619, 0.015964799542258597,\n      -0.015460993364934115, 0.017514180415364684, -0.01552450834140656,\n      0.019069317944447484, -0.015576510005925576, 0.020629168624813315,\n      -0.015619085367878538, 0.022192878107078467, -0.015653943126032854,\n      0.023759746909128628, -0.015682482244617147, 0.025329202343445587,\n      -0.015705848098667846, 0.026900775533146275, -0.015724978441951087,\n      0.028474082594307119, -0.015740641042314017, 0.030048809229354274,\n      -0.015753464494904314, 0.031624698113198423, -0.015763963449900626,\n      0.0332015385658754, -0.015772559267231291, 0.034779158097219473,\n      -0.015779596927227746, 0.036357415484227378, -0.015785358875896553,\n      0.037936195103283277, -0.015790076360469363, 0.039515402289777117,\n      -0.015793938710166291, 0.041094959538881412, -0.015797100934642306,\n      0.04267480339501039, -0.015799689945068959, 0.044254881905124527,\n      -0.015801809647525297, 0.045835152533672645, -0.015803545113113673, 0.0,\n      0.0, 0.0, 0.0, 0.0, 0.0, 1.0181340739972458E-5, 1.0542719041302999E-5,\n      1.0838590570097395E-5, 1.1080829689681565E-5, 1.1279158306483658E-5,\n      1.144153604427495E-5, 1.1574479691819914E-5, 1.1683324744491336E-5,\n      1.1772439536433822E-5, 1.1845400557151281E-5, 1.1905135988588624E-5,\n      1.1954043223354757E-5, 1.1994085080505796E-5, 1.2026868580365706E-5,\n      1.2053709439894543E-5, 1.2075684877029846E-5, 1.2093676843224852E-5,\n      1.2108407419257041E-5, 1.2120467794865149E-5, 1.2130341995269178E-5,\n      1.2138426306802011E-5, 1.2145045181271405E-5, 1.2150464257350259E-5,\n      1.2154901021589286E-5, 1.2158533536915936E-5, 1.2161507588924891E-5,\n      1.2163942536765875E-5, 1.2165936103445428E-5, 1.2167568297794291E-5,\n      1.2168904625502704E-5, 0.028285259662161152, -1.0181340739972458E-5,\n      0.028286296467046231, -1.0542719041302999E-5, 0.028287366025317579,\n      -1.0838590570097395E-5, 0.028288462399793535, -1.1080829689681565E-5,\n      0.028289580729520879, -1.1279158306483658E-5, 0.028290717034687728,\n      -1.144153604427495E-5, 0.0282918680568997, -1.1574479691819914E-5,\n      0.028293031128409113, -1.1683324744491336E-5, 0.028294204065048886,\n      -1.1772439536433822E-5, 0.028295385078574275, -1.1845400557151281E-5,\n      0.0282965727048943, -1.1905135988588624E-5, 0.028297765745312665,\n      -1.1954043223354757E-5, 0.028298963218419834, -1.1994085080505796E-5,\n      0.028300164320705649, -1.2026868580365706E-5, 0.028301368394311629,\n      -1.2053709439894543E-5, 0.028302574900628808, -1.2075684877029846E-5,\n      0.028303783398681455, -1.2093676843224852E-5, 0.028304993527429184,\n      -1.2108407419257041E-5, 0.028306204991277124, -1.2120467794865149E-5,\n      0.028307417548212668, -1.2130341995269178E-5, 0.028308631000092649,\n      -1.2138426306802011E-5, 0.028309845184691158, -1.2145045181271405E-5,\n      0.028311059969188864, -1.2150464257350259E-5, 0.028312275244842491,\n      -1.2154901021589286E-5, 0.028313490922620574, -1.2158533536915936E-5,\n      0.028314706929630312, -1.2161507588924891E-5, 0.028315923206192136,\n      -1.2163942536765875E-5, 0.02831713970344454, -1.2165936103445428E-5,\n      0.028318356381383112, -1.2167568297794291E-5, 0.028319573207255002,\n      -1.2168904625502704E-5, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -1.0, -1.0, -1.0,\n      -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0,\n      -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0,\n      -1.0, -1.0, -1.0, 0.0, 1.0, 0.0, 1.0, 0.0, 1.0, 0.0, 1.0, 0.0, 1.0, 0.0,\n      1.0, 0.0, 1.0, 0.0, 1.0, 0.0, 1.0, 0.0, 1.0, 0.0, 1.0, 0.0, 1.0, 0.0, 1.0,\n      0.0, 1.0, 0.0, 1.0, 0.0, 1.0, 0.0, 1.0, 0.0, 1.0, 0.0, 1.0, 0.0, 1.0, 0.0,\n      1.0, 0.0, 1.0, 0.0, 1.0, 0.0, 1.0, 0.0, 1.0, 0.0, 1.0, 0.0, 1.0, 0.0, 1.0,\n      0.0, 1.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 };\n\n    static const real_T b_Mu1[96]{ -0.00093653765389914228,\n      -0.0035160023017820649, -0.0074405818047014721, -0.012466448205861281,\n      -0.018393972058572367, -0.025059710595610407, -0.032329848197080679,\n      -0.040094825899733177, -0.048264944411079785, -0.056766764161831143,\n      -0.065540157918117251, -0.074535897664471232, -0.083713678910717348,\n      -0.0930405031312616, -0.10248935341839394, -0.1120381101989191,\n      -0.12166866349801714, -0.1313661861223655, -0.14111853859280921,\n      -0.15091578194443769, -0.16074977884102493, -0.17061386699515452,\n      -0.18050259178723282, -0.1904114873524522, -0.20033689734995552,\n      -0.21027582822103932, -0.22022582904713195, -0.2301848931858255,\n      -0.24015137773727019, -0.25012393760883478, -3.1731173050451781E-5,\n      0.00093653765389914228, -0.00024199884910901012, 0.0035160023017820649,\n      -0.000779709097649322, 0.0074405818047014721, -0.0017667758970694289,\n      0.012466448205861281, -0.0033030139707138926, 0.018393972058572367,\n      -0.0054701447021948749, 0.025059710595610407, -0.0083350759014597375,\n      0.032329848197080679, -0.011952587050133481, 0.040094825899733177,\n      -0.016367527794460168, 0.048264944411079785, -0.021616617919084473,\n      0.056766764161831143, -0.027729921040941397, 0.065540157918117251,\n      -0.034732051167764379, 0.074535897664471232, -0.04264316054464129,\n      0.083713678910717348, -0.051479748434369123, 0.0930405031312616,\n      -0.0612553232908029, 0.10248935341839394, -0.071980944900540272,\n      0.1120381101989191, -0.0836656682509912, 0.12166866349801714,\n      -0.096316906938816949, 0.1313661861223655, -0.10994073070359503,\n      0.14111853859280921, -0.12454210902778072, 0.15091578194443769,\n      -0.14012511057948704, 0.16074977884102493, -0.15669306650242215,\n      0.17061386699515452, -0.17424870410638291, 0.18050259178723282,\n      -0.19279425632377312, 0.1904114873524522, -0.21233155132502135,\n      0.20033689734995552, -0.23286208588947932, 0.21027582822103932,\n      -0.25438708547643285, 0.22022582904713195, -0.27690755340708595,\n      0.2301848931858255, -0.30042431113136348, 0.24015137773727019,\n      -0.324938031195581, 0.25012393760883478, -1.0, -1.0, -1.0, 1.0, 1.0, 1.0 };\n\n    static const uint8_T b_Mrows_0[96]{ 2U, 4U, 6U, 8U, 10U, 12U, 14U, 16U, 18U,\n      20U, 22U, 24U, 26U, 28U, 30U, 32U, 34U, 36U, 38U, 40U, 42U, 44U, 46U, 48U,\n      50U, 52U, 54U, 56U, 58U, 60U, 61U, 62U, 63U, 64U, 65U, 66U, 67U, 68U, 69U,\n      70U, 71U, 72U, 73U, 74U, 75U, 76U, 77U, 78U, 79U, 80U, 81U, 82U, 83U, 84U,\n      85U, 86U, 87U, 88U, 89U, 90U, 91U, 92U, 93U, 94U, 95U, 96U, 97U, 98U, 99U,\n      100U, 101U, 102U, 103U, 104U, 105U, 106U, 107U, 108U, 109U, 110U, 111U,\n      112U, 113U, 114U, 115U, 116U, 117U, 118U, 119U, 120U, 121U, 122U, 123U,\n      151U, 152U, 153U };\n\n    static const real_T b_Linv[16]{ 7.9998080541108729, -2.9530049756913286,\n      -2.1896728723561849, 0.0, 0.0, 8.7034491930031166, -2.0693880092142272,\n      0.0, 0.0, 0.0, 9.0725349962825437, 0.0, 0.0, 0.0, 0.0, 0.001 };\n\n    static const real_T b_Hinv[16]{ 77.511834577007519, -21.170045986459318,\n      -19.865883764862005, 0.0, -21.170045986459318, 80.032394587866222,\n      -18.77459513448354, 0.0, -19.865883764862005, -18.77459513448354,\n      82.310891258771491, 0.0, 0.0, 0.0, 0.0, 1.0E-6 };\n\n    static const real_T b_Ac[384]{ -0.00093653765389914228,\n      -0.0035160023017820649, -0.0074405818047014721, -0.012466448205861281,\n      -0.018393972058572367, -0.025059710595610407, -0.032329848197080679,\n      -0.040094825899733177, -0.048264944411079785, -0.056766764161831143,\n      -0.065540157918117251, -0.074535897664471232, -0.083713678910717348,\n      -0.0930405031312616, -0.10248935341839394, -0.1120381101989191,\n      -0.12166866349801714, -0.1313661861223655, -0.14111853859280921,\n      -0.15091578194443769, -0.16074977884102493, -0.17061386699515452,\n      -0.18050259178723282, -0.1904114873524522, -0.20033689734995552,\n      -0.21027582822103932, -0.22022582904713195, -0.2301848931858255,\n      -0.24015137773727019, -0.25012393760883478, -3.1731173050451781E-5,\n      0.00093653765389914228, -0.00024199884910901012, 0.0035160023017820649,\n      -0.000779709097649322, 0.0074405818047014721, -0.0017667758970694289,\n      0.012466448205861281, -0.0033030139707138926, 0.018393972058572367,\n      -0.0054701447021948749, 0.025059710595610407, -0.0083350759014597375,\n      0.032329848197080679, -0.011952587050133481, 0.040094825899733177,\n      -0.016367527794460168, 0.048264944411079785, -0.021616617919084473,\n      0.056766764161831143, -0.027729921040941397, 0.065540157918117251,\n      -0.034732051167764379, 0.074535897664471232, -0.04264316054464129,\n      0.083713678910717348, -0.051479748434369123, 0.0930405031312616,\n      -0.0612553232908029, 0.10248935341839394, -0.071980944900540272,\n      0.1120381101989191, -0.0836656682509912, 0.12166866349801714,\n      -0.096316906938816949, 0.1313661861223655, -0.10994073070359503,\n      0.14111853859280921, -0.12454210902778072, 0.15091578194443769,\n      -0.14012511057948704, 0.16074977884102493, -0.15669306650242215,\n      0.17061386699515452, -0.17424870410638291, 0.18050259178723282,\n      -0.19279425632377312, 0.1904114873524522, -0.21233155132502135,\n      0.20033689734995552, -0.23286208588947932, 0.21027582822103932,\n      -0.25438708547643285, 0.22022582904713195, -0.27690755340708595,\n      0.2301848931858255, -0.30042431113136348, 0.24015137773727019,\n      -0.324938031195581, 0.25012393760883478, -1.0, -1.0, -1.0, 1.0, 1.0, 1.0,\n      -0.0, -0.00093653765389914228, -0.0035160023017820649,\n      -0.0074405818047014721, -0.012466448205861281, -0.018393972058572367,\n      -0.025059710595610407, -0.032329848197080679, -0.040094825899733177,\n      -0.048264944411079785, -0.056766764161831143, -0.065540157918117251,\n      -0.074535897664471232, -0.083713678910717348, -0.0930405031312616,\n      -0.10248935341839394, -0.1120381101989191, -0.12166866349801714,\n      -0.1313661861223655, -0.14111853859280921, -0.15091578194443769,\n      -0.16074977884102493, -0.17061386699515452, -0.18050259178723282,\n      -0.1904114873524522, -0.20033689734995552, -0.21027582822103932,\n      -0.22022582904713195, -0.2301848931858255, -0.24015137773727019, 0.0, 0.0,\n      -3.1731173050451781E-5, 0.00093653765389914228, -0.00024199884910901012,\n      0.0035160023017820649, -0.000779709097649322, 0.0074405818047014721,\n      -0.0017667758970694289, 0.012466448205861281, -0.0033030139707138926,\n      0.018393972058572367, -0.0054701447021948749, 0.025059710595610407,\n      -0.0083350759014597375, 0.032329848197080679, -0.011952587050133481,\n      0.040094825899733177, -0.016367527794460168, 0.048264944411079785,\n      -0.021616617919084473, 0.056766764161831143, -0.027729921040941397,\n      0.065540157918117251, -0.034732051167764379, 0.074535897664471232,\n      -0.04264316054464129, 0.083713678910717348, -0.051479748434369123,\n      0.0930405031312616, -0.0612553232908029, 0.10248935341839394,\n      -0.071980944900540272, 0.1120381101989191, -0.0836656682509912,\n      0.12166866349801714, -0.096316906938816949, 0.1313661861223655,\n      -0.10994073070359503, 0.14111853859280921, -0.12454210902778072,\n      0.15091578194443769, -0.14012511057948704, 0.16074977884102493,\n      -0.15669306650242215, 0.17061386699515452, -0.17424870410638291,\n      0.18050259178723282, -0.19279425632377312, 0.1904114873524522,\n      -0.21233155132502135, 0.20033689734995552, -0.23286208588947932,\n      0.21027582822103932, -0.25438708547643285, 0.22022582904713195,\n      -0.27690755340708595, 0.2301848931858255, -0.30042431113136348,\n      0.24015137773727019, -0.0, -1.0, -1.0, 0.0, 1.0, 1.0, -0.0, -0.0,\n      -0.00093653765389914228, -0.0035160023017820649, -0.0074405818047014721,\n      -0.012466448205861281, -0.018393972058572367, -0.025059710595610407,\n      -0.032329848197080679, -0.040094825899733177, -0.048264944411079785,\n      -0.056766764161831143, -0.065540157918117251, -0.074535897664471232,\n      -0.083713678910717348, -0.0930405031312616, -0.10248935341839394,\n      -0.1120381101989191, -0.12166866349801714, -0.1313661861223655,\n      -0.14111853859280921, -0.15091578194443769, -0.16074977884102493,\n      -0.17061386699515452, -0.18050259178723282, -0.1904114873524522,\n      -0.20033689734995552, -0.21027582822103932, -0.22022582904713195,\n      -0.2301848931858255, 0.0, 0.0, 0.0, 0.0, -3.1731173050451781E-5,\n      0.00093653765389914228, -0.00024199884910901012, 0.0035160023017820649,\n      -0.000779709097649322, 0.0074405818047014721, -0.0017667758970694289,\n      0.012466448205861281, -0.0033030139707138926, 0.018393972058572367,\n      -0.0054701447021948749, 0.025059710595610407, -0.0083350759014597375,\n      0.032329848197080679, -0.011952587050133481, 0.040094825899733177,\n      -0.016367527794460168, 0.048264944411079785, -0.021616617919084473,\n      0.056766764161831143, -0.027729921040941397, 0.065540157918117251,\n      -0.034732051167764379, 0.074535897664471232, -0.04264316054464129,\n      0.083713678910717348, -0.051479748434369123, 0.0930405031312616,\n      -0.0612553232908029, 0.10248935341839394, -0.071980944900540272,\n      0.1120381101989191, -0.0836656682509912, 0.12166866349801714,\n      -0.096316906938816949, 0.1313661861223655, -0.10994073070359503,\n      0.14111853859280921, -0.12454210902778072, 0.15091578194443769,\n      -0.14012511057948704, 0.16074977884102493, -0.15669306650242215,\n      0.17061386699515452, -0.17424870410638291, 0.18050259178723282,\n      -0.19279425632377312, 0.1904114873524522, -0.21233155132502135,\n      0.20033689734995552, -0.23286208588947932, 0.21027582822103932,\n      -0.25438708547643285, 0.22022582904713195, -0.27690755340708595,\n      0.2301848931858255, -0.0, -0.0, -1.0, 0.0, 0.0, 1.0, 1.0, 1.0, 1.0, 1.0,\n      1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0,\n      1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0,\n      1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0,\n      1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0,\n      1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0,\n      1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 0.0, 0.0, 0.0, 0.0,\n      0.0, 0.0 };\n\n    static const real_T b_Kr[180]{ 0.0, -9.3653765389914245E-6, 0.0,\n      -3.5160023017820657E-5, 0.0, -7.4405818047014734E-5, 0.0,\n      -0.00012466448205861283, 0.0, -0.0001839397205857237, 0.0,\n      -0.00025059710595610411, 0.0, -0.00032329848197080687, 0.0,\n      -0.00040094825899733187, 0.0, -0.00048264944411079792, 0.0,\n      -0.00056766764161831154, 0.0, -0.00065540157918117265, 0.0,\n      -0.00074535897664471248, 0.0, -0.00083713678910717364, 0.0,\n      -0.00093040503131261616, 0.0, -0.0010248935341839395, 0.0,\n      -0.0011203811019891911, 0.0, -0.0012166866349801716, 0.0,\n      -0.0013136618612236554, 0.0, -0.0014111853859280923, 0.0,\n      -0.0015091578194443773, 0.0, -0.0016074977884102497, 0.0,\n      -0.0017061386699515455, 0.0, -0.0018050259178723285, 0.0,\n      -0.0019041148735245224, 0.0, -0.0020033689734995554, 0.0,\n      -0.0021027582822103937, 0.0, -0.00220225829047132, 0.0,\n      -0.0023018489318582555, 0.0, -0.0024015137773727023, 0.0,\n      -0.0025012393760883481, -0.0, -0.0, 0.0, -9.3653765389914245E-6, 0.0,\n      -3.5160023017820657E-5, 0.0, -7.4405818047014734E-5, 0.0,\n      -0.00012466448205861283, 0.0, -0.0001839397205857237, 0.0,\n      -0.00025059710595610411, 0.0, -0.00032329848197080687, 0.0,\n      -0.00040094825899733187, 0.0, -0.00048264944411079792, 0.0,\n      -0.00056766764161831154, 0.0, -0.00065540157918117265, 0.0,\n      -0.00074535897664471248, 0.0, -0.00083713678910717364, 0.0,\n      -0.00093040503131261616, 0.0, -0.0010248935341839395, 0.0,\n      -0.0011203811019891911, 0.0, -0.0012166866349801716, 0.0,\n      -0.0013136618612236554, 0.0, -0.0014111853859280923, 0.0,\n      -0.0015091578194443773, 0.0, -0.0016074977884102497, 0.0,\n      -0.0017061386699515455, 0.0, -0.0018050259178723285, 0.0,\n      -0.0019041148735245224, 0.0, -0.0020033689734995554, 0.0,\n      -0.0021027582822103937, 0.0, -0.00220225829047132, 0.0,\n      -0.0023018489318582555, 0.0, -0.0024015137773727023, -0.0, -0.0, -0.0,\n      -0.0, 0.0, -9.3653765389914245E-6, 0.0, -3.5160023017820657E-5, 0.0,\n      -7.4405818047014734E-5, 0.0, -0.00012466448205861283, 0.0,\n      -0.0001839397205857237, 0.0, -0.00025059710595610411, 0.0,\n      -0.00032329848197080687, 0.0, -0.00040094825899733187, 0.0,\n      -0.00048264944411079792, 0.0, -0.00056766764161831154, 0.0,\n      -0.00065540157918117265, 0.0, -0.00074535897664471248, 0.0,\n      -0.00083713678910717364, 0.0, -0.00093040503131261616, 0.0,\n      -0.0010248935341839395, 0.0, -0.0011203811019891911, 0.0,\n      -0.0012166866349801716, 0.0, -0.0013136618612236554, 0.0,\n      -0.0014111853859280923, 0.0, -0.0015091578194443773, 0.0,\n      -0.0016074977884102497, 0.0, -0.0017061386699515455, 0.0,\n      -0.0018050259178723285, 0.0, -0.0019041148735245224, 0.0,\n      -0.0020033689734995554, 0.0, -0.0021027582822103937, 0.0,\n      -0.00220225829047132, 0.0, -0.0023018489318582555 };\n\n    static const real_T b_Kv[186]{ 2.1048813364274074E-21, 0.0,\n      2.0367999231504753E-21, 0.0, 1.963101434528115E-21, 0.0,\n      1.9185804023058977E-21, 0.0, 1.868966093870934E-21, 0.0,\n      1.796328274089597E-21, 0.0, 1.7349911122253774E-21, 0.0,\n      1.7030514264606644E-21, 0.0, 1.6488191057351622E-21, 0.0,\n      1.6067314995395007E-21, 0.0, 1.5421026063446421E-21, 0.0,\n      1.4541645260462805E-21, 0.0, 1.3774160449568385E-21, 0.0,\n      1.3124717843253368E-21, 0.0, 1.2423326250080741E-21, 0.0,\n      1.1669575798210663E-21, 0.0, 1.0863130912963038E-21, 0.0,\n      1.0003716849027306E-21, 0.0, 9.0911086639684616E-22, 0.0,\n      8.1251221904972838E-22, 0.0, 7.45810987081722E-22, 0.0,\n      6.750972627362992E-22, 0.0, 6.003613905675536E-22, 0.0,\n      5.0397030408364459E-22, 0.0, 4.0286631237260206E-22, 0.0,\n      3.1466905176009051E-22, 0.0, 2.40050378749355E-22, 0.0,\n      1.7968319574083117E-22, 0.0, 1.1661610016180726E-22, 0.0,\n      5.08471718523989E-23, 0.0, 0.0, 0.0, 1.9645136911104807E-21, 0.0,\n      1.9014926490178118E-21, 0.0, 1.8334112357408797E-21, 0.0,\n      1.7936108616867852E-21, 0.0, 1.749089829464568E-21, 0.0,\n      1.6825264637454713E-21, 0.0, 1.6268377012482672E-21, 0.0,\n      1.5993986539523138E-21, 0.0, 1.5505099109034678E-21, 0.0,\n      1.5132266474620986E-21, 0.0, 1.4541899839823039E-21, 0.0,\n      1.3726120335033124E-21, 0.0, 1.3016230104890837E-21, 0.0,\n      1.2418235866837748E-21, 0.0, 1.1768793260522731E-21, 0.0,\n      1.1067401667350104E-21, 0.0, 1.0313651215480027E-21, 0.0,\n      9.5072063302324014E-22, 0.0, 8.64779226629667E-22, 0.0,\n      7.7351840812378241E-22, 0.0, 7.1081787534493059E-22, 0.0,\n      6.4411664337692421E-22, 0.0, 5.734029190315014E-22, 0.0,\n      4.8171798957862287E-22, 0.0, 3.8532690309471381E-22, 0.0,\n      3.0117196866780426E-22, 0.0, 2.299237653394257E-22, 0.0,\n      1.7225414961282313E-22, 0.0, 1.1188696660429932E-22, 0.0,\n      4.8819871025275388E-23, 0.0, 0.0, 0.0, 1.8276572918198257E-21, 0.0,\n      1.7692342070093791E-21, 0.0, 1.7062131649167103E-21, 0.0,\n      1.6706783323232952E-21, 0.0, 1.6308779582692007E-21, 0.0,\n      1.5700836357052248E-21, 0.0, 1.5197935603278867E-21, 0.0,\n      1.4966513785141996E-21, 0.0, 1.4529390408764875E-21, 0.0,\n      1.4203235881694001E-21, 0.0, 1.3667670343862724E-21, 0.0,\n      1.2914570805647193E-21, 0.0, 1.2261524204274862E-21, 0.0,\n      1.171436687755016E-21, 0.0, 1.1116372639497072E-21, 0.0,\n      1.0466930033182054E-21, 0.0, 9.7655384400094273E-22, 0.0,\n      9.01178798813935E-22, 0.0, 8.2053431028917238E-22, 0.0,\n      7.3459290389559928E-22, 0.0, 6.7587866607323165E-22, 0.0,\n      6.1317813329437983E-22, 0.0, 5.4647690132637346E-22, 0.0,\n      4.5948988663919219E-22, 0.0, 3.6780495718631362E-22, 0.0,\n      2.8768716104416306E-22, 0.0, 2.1980551695901197E-22, 0.0,\n      1.6483060397239186E-22, 0.0, 1.071609882457893E-22, 0.0,\n      4.6793805237265468E-23, 0.0, 0.0, 0.0 };\n\n    static const real_T b_Kx[12]{ 7.689433750374233E-6, -0.00052983264547518268,\n      -4.0797700035767348E-7, 0.033752729948155841, 6.2634718616695827E-6,\n      -0.00049099757092383356, -3.7807356318853408E-7, 0.03125149057206749,\n      5.0972730132946579E-6, -0.00045360941458819537, -3.4928426905767272E-7,\n      0.028849976794694789 };\n\n    static const real_T b_Ku1[3]{ 0.0056257498156150479, 0.0053016816587513772,\n      0.0049805833709413213 };\n\n    static const real_T d_a[16]{ 0.81873075307798182, 1.5605438447738586E-5,\n      -0.020266511909212012, 0.0, -0.090634596591614353, 0.99996475781523508,\n      0.045768413341926564, 0.0, -6.97896423745501E-5, -2.7136872273192444E-8,\n      1.0000352421847649, 0.0, 0.0, 0.0, 0.0, 1.0 };\n\n    static const real_T c_a[4]{ -1.1168314590257722, -0.63245448068765309,\n      -0.0016088636636616162, 0.0 };\n\n    static const real_T b_a[8]{ -4.0924793231964868E-18, -0.0027223994261342177,\n      3.53553285779405, 0.0, 0.0, 0.0, 0.0, 0.0 };\n\n    static const real_T a[8]{ -0.28835920047413488, 0.59326526995080475,\n      3.6969901567350294, 0.0089491794894280968, 0.0077934105482969848,\n      -0.056577847513402488, -0.016886650855456559, 0.09468737576656984 };\n\n    // Sum: '<S2>/Sum1' incorporates:\n    //   Constant: '<Root>/v0 host'\n    //   TransferFcn: '<S2>/Transfer Fcn'\n\n    mpcACCsystem_B.Sum1 = 2.0 * mpcACCsystem_X.TransferFcn_CSTATE + 20.0;\n\n    // MATLAB Function: '<S1>/DataTypeConversion_dmin' incorporates:\n    //   Constant: '<Root>/Time gap'\n    //   Constant: '<S1>/Default spacing constant'\n    //   Product: '<S1>/Product2'\n    //   Sum: '<S1>/Sum1'\n\n    mpcACCsys_DataTypeConversion_L0(mpcACCsystem_B.Sum1 * 1.4 + 10.0, &y_m);\n    tmp = ((&mpcACCsystem_M)->isMajorTimeStep());\n\n    // Sum: '<Root>/Sum' incorporates:\n    //   Constant: '<Root>/x0 host'\n    //   Constant: '<Root>/x0 lead'\n    //   Integrator: '<S2>/Integrator1'\n    //   Integrator: '<S3>/Integrator1'\n    //   Sum: '<S2>/Sum'\n    //   Sum: '<S3>/Sum'\n\n    mpcACCsystem_Y.d_rel = (mpcACCsystem_X.Integrator1_CSTATE + 50.0) -\n      (mpcACCsystem_X.Integrator1_CSTATE_p + 10.0);\n\n    // MATLAB Function: '<S1>/DataTypeConversion_reldist'\n    mpcACCsys_DataTypeConversion_L0(mpcACCsystem_Y.d_rel, &y_d);\n\n    // MATLAB Function: '<S1>/DataTypeConversion_vego'\n    mpcACCsys_DataTypeConversion_L0(mpcACCsystem_B.Sum1, &y_j);\n    if (tmp) {\n      // MATLAB Function: '<S1>/DataTypeConversion_L0' incorporates:\n      //   Constant: '<S1>/Default spacing constant'\n\n      mpcACCsys_DataTypeConversion_L0(10.0, &rtb_y_b);\n\n      // MATLAB Function: '<S1>/DataTypeConversion_vset' incorporates:\n      //   Constant: '<Root>/Set velocity'\n\n      mpcACCsys_DataTypeConversion_L0(30.0, &rtb_y);\n    }\n\n    // Sum: '<S3>/Sum1' incorporates:\n    //   Constant: '<Root>/v0 lead'\n    //   TransferFcn: '<S3>/Transfer Fcn'\n\n    mpcACCsystem_B.Sum1_m = 2.0 * mpcACCsystem_X.TransferFcn_CSTATE_i + 25.0;\n\n    // Sum: '<Root>/Sum1'\n    mpcACCsystem_Y.v_rel = mpcACCsystem_B.Sum1_m - mpcACCsystem_B.Sum1;\n\n    // MATLAB Function: '<S1>/DataTypeConversion_vlead' incorporates:\n    //   Sum: '<S1>/Sum6'\n\n    mpcACCsys_DataTypeConversion_L0(mpcACCsystem_B.Sum1 + mpcACCsystem_Y.v_rel,\n      &y);\n    if (tmp) {\n      // MATLAB Function: '<S1>/DataTypeConversion_amin' incorporates:\n      //   Constant: '<S1>/Minimum longitudinal acceleration constant'\n\n      mpcACCsys_DataTypeConversion_L0(-3.0, &rtb_y_fe);\n\n      // MATLAB Function: '<S1>/DataTypeConversion_amax' incorporates:\n      //   Constant: '<S1>/Maximum longitudinal acceleration constant'\n\n      mpcACCsys_DataTypeConversion_L0(2.0, &rtb_y_ds);\n\n      // SignalConversion generated from: '<S36>/ SFunction ' incorporates:\n      //   Constant: '<S1>/Minimum velocity constant'\n      //   MATLAB Function: '<S35>/optimizer'\n\n      rtb_TmpSignalConversionAtSFun_e[0] = y_m;\n      rtb_TmpSignalConversionAtSFun_e[1] = 0.0;\n\n      // SignalConversion generated from: '<S36>/ SFunction ' incorporates:\n      //   Constant: '<S1>/Maximum velocity constant'\n      //   Constant: '<S1>/Unconstrained'\n      //   MATLAB Function: '<S35>/optimizer'\n\n      rtb_TmpSignalConversionAtSFu_mm[0] = 0;\n      rtb_TmpSignalConversionAtSFu_mm[1] = 50;\n\n      // MATLAB Function: '<S35>/optimizer' incorporates:\n      //   SignalConversion generated from: '<S36>/ SFunction '\n\n      std::memset(&vseq[0], 0, 62U * sizeof(real_T));\n      for (i = 0; i < 31; i++) {\n        vseq[(i << 1) + 1] = 1.0;\n      }\n\n      for (i = 0; i < 30; i++) {\n        d_i = i << 1;\n        rseq[d_i] = rtb_y_b * 0.02 - 0.76;\n        rseq[d_i + 1] = rtb_y * 0.02 - 0.4;\n      }\n\n      for (i = 0; i < 31; i++) {\n        vseq[i << 1] = mpcACCsystem_RMDscale * y - mpcACCsystem_voff;\n      }\n\n      y_m = vseq[0];\n      y = vseq[1];\n      xk[0] = mpcACCsystem_DW.last_x_PreviousInput[0];\n      xk[1] = mpcACCsystem_DW.last_x_PreviousInput[1];\n      xk[2] = mpcACCsystem_DW.last_x_PreviousInput[2];\n      xk[3] = mpcACCsystem_DW.last_x_PreviousInput[3];\n\n      // SignalConversion generated from: '<S36>/ SFunction ' incorporates:\n      //   MATLAB Function: '<S35>/optimizer'\n\n      ymax_incr[0] = y_d * 0.02 - 0.76;\n      ymax_incr[1] = y_j * 0.02 - 0.4;\n\n      // MATLAB Function: '<S35>/optimizer' incorporates:\n      //   Memory: '<S15>/Memory'\n      //   UnitDelay: '<S15>/last_mv'\n\n      y_d = mpcACCsystem_DW.last_x_PreviousInput[1];\n      y_j = mpcACCsystem_DW.last_x_PreviousInput[0];\n      xk_0 = mpcACCsystem_DW.last_x_PreviousInput[2];\n      xk_1 = mpcACCsystem_DW.last_x_PreviousInput[3];\n      for (i = 0; i < 2; i++) {\n        y_innov[i] = ymax_incr[i] - ((((f_a[i + 2] * y_d + f_a[i] * y_j) + f_a[i\n          + 4] * xk_0) + f_a[i + 6] * xk_1) + (0.0 * y_m + 0.0 * y));\n      }\n\n      y_innov_0 = y_innov[1];\n      y_innov_1 = y_innov[0];\n      for (i = 0; i < 4; i++) {\n        rtb_xest[i] = (e_a[i + 4] * y_innov_0 + e_a[i] * y_innov_1) + xk[i];\n      }\n\n      ymax_incr_flag[0] = false;\n      ymax_incr[0] = 0.0;\n      ymin_incr_flag[0] = false;\n      ymin_incr[0] = 0.0;\n      ymax_incr_flag[1] = false;\n      ymax_incr[1] = 0.0;\n      ymin_incr_flag[1] = false;\n      ymin_incr[1] = 0.0;\n      umax_incr_flag = false;\n      y_d = 0.0;\n      umin_incr_flag = false;\n      y_j = 0.0;\n      for (d_i = 0; d_i < 96; d_i++) {\n        xk_0 = 0.0;\n        for (i = 0; i < 62; i++) {\n          xk_0 += b_Mv[96 * i + d_i] * vseq[i];\n        }\n\n        xk_1 = b_Mlim[d_i];\n        xk_0 = -((((((b_Mx[d_i + 96] * rtb_xest[1] + b_Mx[d_i] * rtb_xest[0]) +\n                     b_Mx[d_i + 192] * rtb_xest[2]) + b_Mx[d_i + 288] *\n                    rtb_xest[3]) + xk_1) + b_Mu1[d_i] *\n                  mpcACCsystem_DW.last_mv_DSTATE) + xk_0);\n        Bc[d_i] = xk_0;\n        b_Mrows = b_Mrows_0[d_i];\n        if (b_Mrows <= 60) {\n          i = (b_Mrows - (((b_Mrows - 1) / mpcACCsystem_ny) << 1)) - 1;\n          b_Del_Save_Flag0 = ymax_incr_flag[i];\n          if (!ymax_incr_flag[i]) {\n            xk_1 = -(0.02 * static_cast<real_T>\n                     (rtb_TmpSignalConversionAtSFu_mm[i]) - (-0.36 *\n                      static_cast<real_T>(i) + 0.76)) - (-xk_1);\n            b_Del_Save_Flag0 = true;\n          } else {\n            xk_1 = ymax_incr[i];\n          }\n\n          ymax_incr[i] = xk_1;\n          ymax_incr_flag[i] = b_Del_Save_Flag0;\n          Bc[d_i] = xk_0 + xk_1;\n        } else if (b_Mrows <= 120) {\n          i = (b_Mrows - (((b_Mrows - 61) >> 1) << 1)) - 61;\n          b_Del_Save_Flag0 = ymin_incr_flag[i];\n          if (!ymin_incr_flag[i]) {\n            xk_1 = (0.02 * rtb_TmpSignalConversionAtSFun_e[i] - (-0.36 *\n                     static_cast<real_T>(i) + 0.76)) - (-xk_1);\n            b_Del_Save_Flag0 = true;\n          } else {\n            xk_1 = ymin_incr[i];\n          }\n\n          ymin_incr[i] = xk_1;\n          ymin_incr_flag[i] = b_Del_Save_Flag0;\n          Bc[d_i] = xk_0 + xk_1;\n        } else if (b_Mrows <= 150) {\n          if (!umax_incr_flag) {\n            y_d = -(mpcACCsystem_RMVscale * rtb_y_ds) - (-xk_1);\n            umax_incr_flag = true;\n          }\n\n          Bc[d_i] = xk_0 + y_d;\n        } else {\n          if (!umin_incr_flag) {\n            y_j = mpcACCsystem_RMVscale * rtb_y_fe - (-xk_1);\n            umin_incr_flag = true;\n          }\n\n          Bc[d_i] = xk_0 + y_j;\n        }\n      }\n\n      f[0] = 0.0;\n      f[1] = 0.0;\n      f[2] = 0.0;\n      f[3] = 0.0;\n      for (d_i = 0; d_i < 3; d_i++) {\n        rtb_y_fe = 0.0;\n        for (i = 0; i < 60; i++) {\n          rtb_y_fe += b_Kr[60 * d_i + i] * rseq[i];\n        }\n\n        rtb_y_ds = 0.0;\n        for (i = 0; i < 62; i++) {\n          rtb_y_ds += b_Kv[62 * d_i + i] * vseq[i];\n        }\n\n        i = d_i << 2;\n        f[d_i] = (((((b_Kx[i + 1] * rtb_xest[1] + b_Kx[i] * rtb_xest[0]) +\n                     b_Kx[i + 2] * rtb_xest[2]) + b_Kx[i + 3] * rtb_xest[3]) +\n                   rtb_y_fe) + b_Ku1[d_i] * mpcACCsystem_DW.last_mv_DSTATE) +\n          rtb_y_ds;\n      }\n\n      std::memcpy(&mpcACCsystem_B.iAout[0],\n                  &mpcACCsystem_DW.Memory_PreviousInput[0], 96U * sizeof\n                  (boolean_T));\n      mpcACCsystem_qpkwik(b_Linv, b_Hinv, f, b_Ac, Bc, mpcACCsystem_B.iAout, 400,\n                          1.0E-6, rtb_xest, a__1, &i);\n      if ((i < 0) || (i == 0)) {\n        rtb_xest[0] = 0.0;\n      }\n\n      mpcACCsystem_B.u = mpcACCsystem_DW.last_mv_DSTATE + rtb_xest[0];\n      y_d = mpcACCsystem_DW.last_x_PreviousInput[1];\n      y_j = mpcACCsystem_DW.last_x_PreviousInput[0];\n      xk_0 = mpcACCsystem_DW.last_x_PreviousInput[2];\n      xk_1 = mpcACCsystem_DW.last_x_PreviousInput[3];\n      y_innov_0 = y_innov[1];\n      y_innov_1 = y_innov[0];\n      for (i = 0; i < 4; i++) {\n        mpcACCsystem_B.xk1[i] = (((((d_a[i + 4] * y_d + d_a[i] * y_j) + d_a[i +\n          8] * xk_0) + d_a[i + 12] * xk_1) + c_a[i] * mpcACCsystem_B.u) + (b_a[i]\n          * y_m + 0.0 * y)) + (a[i + 4] * y_innov_0 + a[i] * y_innov_1);\n      }\n\n      // Outport: '<Root>/a_ego' incorporates:\n      //   Gain: '<S15>/umin_scale1'\n\n      mpcACCsystem_Y.a_ego = 5.0 * mpcACCsystem_B.u;\n    }\n\n    // Outport: '<Root>/v_ego'\n    mpcACCsystem_Y.v_ego = mpcACCsystem_B.Sum1;\n    if (tmp) {\n      // Sin: '<Root>/Sine Wave'\n      if (mpcACCsystem_DW.systemEnable != 0) {\n        y_m = (((&mpcACCsystem_M)->Timing.clockTick1) * 0.1);\n        mpcACCsystem_DW.lastSin = std::sin(0.2 * y_m);\n        mpcACCsystem_DW.lastCos = std::cos(0.2 * y_m);\n        mpcACCsystem_DW.systemEnable = 0;\n      }\n\n      // Outport: '<Root>/a_lead' incorporates:\n      //   Sin: '<Root>/Sine Wave'\n\n      mpcACCsystem_Y.a_lead = ((mpcACCsystem_DW.lastSin * 0.99980000666657776 +\n        mpcACCsystem_DW.lastCos * -0.019998666693333084) * 0.99980000666657776 +\n        (mpcACCsystem_DW.lastCos * 0.99980000666657776 - mpcACCsystem_DW.lastSin\n         * -0.019998666693333084) * 0.019998666693333084) * 0.6;\n\n      // MATLAB Function: '<S1>/DataTypeConversion_atrack' incorporates:\n      //   Constant: '<S1>/External control signal constant'\n\n      mpcACCsys_DataTypeConversion_L0(0.0, &y_m);\n    }\n\n    // Integrator: '<S2>/Integrator'\n    mpcACCsystem_B.Integrator = mpcACCsystem_X.Integrator_CSTATE;\n\n    // Integrator: '<S3>/Integrator'\n    mpcACCsystem_B.Integrator_c = mpcACCsystem_X.Integrator_CSTATE_a;\n  }\n\n  if ((&mpcACCsystem_M)->isMajorTimeStep()) {\n    real_T HoldSine;\n    if ((&mpcACCsystem_M)->isMajorTimeStep()) {\n      // Update for Memory: '<S15>/last_x'\n      mpcACCsystem_DW.last_x_PreviousInput[0] = mpcACCsystem_B.xk1[0];\n      mpcACCsystem_DW.last_x_PreviousInput[1] = mpcACCsystem_B.xk1[1];\n      mpcACCsystem_DW.last_x_PreviousInput[2] = mpcACCsystem_B.xk1[2];\n      mpcACCsystem_DW.last_x_PreviousInput[3] = mpcACCsystem_B.xk1[3];\n\n      // Update for UnitDelay: '<S15>/last_mv'\n      mpcACCsystem_DW.last_mv_DSTATE = mpcACCsystem_B.u;\n\n      // Update for Memory: '<S15>/Memory'\n      std::memcpy(&mpcACCsystem_DW.Memory_PreviousInput[0],\n                  &mpcACCsystem_B.iAout[0], 96U * sizeof(boolean_T));\n\n      // Update for Sin: '<Root>/Sine Wave'\n      HoldSine = mpcACCsystem_DW.lastSin;\n      mpcACCsystem_DW.lastSin = mpcACCsystem_DW.lastSin * 0.99980000666657776 +\n        mpcACCsystem_DW.lastCos * 0.019998666693333084;\n      mpcACCsystem_DW.lastCos = mpcACCsystem_DW.lastCos * 0.99980000666657776 -\n        HoldSine * 0.019998666693333084;\n    }\n  }                                    // end MajorTimeStep\n\n  if ((&mpcACCsystem_M)->isMajorTimeStep()) {\n    rt_ertODEUpdateContinuousStates(&(&mpcACCsystem_M)->solverInfo);\n\n    // Update absolute time for base rate\n    // The \"clockTick0\" counts the number of times the code of this task has\n    //  been executed. The absolute time is the multiplication of \"clockTick0\"\n    //  and \"Timing.stepSize0\". Size of \"clockTick0\" ensures timer will not\n    //  overflow during the application lifespan selected.\n\n    ++(&mpcACCsystem_M)->Timing.clockTick0;\n    (&mpcACCsystem_M)->Timing.t[0] = rtsiGetSolverStopTime(&(&mpcACCsystem_M)\n      ->solverInfo);\n\n    {\n      // Update absolute timer for sample time: [0.1s, 0.0s]\n      // The \"clockTick1\" counts the number of times the code of this task has\n      //  been executed. The resolution of this integer timer is 0.1, which is the step size\n      //  of the task. Size of \"clockTick1\" ensures timer will not overflow during the\n      //  application lifespan selected.\n\n      (&mpcACCsystem_M)->Timing.clockTick1++;\n    }\n  }                                    // end MajorTimeStep\n}\n\n// Derivatives for root system: '<Root>'\nvoid mpcACCsystem::mpcACCsystem_derivatives()\n{\n  mpcACCsystem::XDot_mpcACCsystem_T *_rtXdot;\n  _rtXdot = ((XDot_mpcACCsystem_T *) (&mpcACCsystem_M)->derivs);\n\n  // Derivatives for TransferFcn: '<S2>/Transfer Fcn'\n  _rtXdot->TransferFcn_CSTATE = -2.0 * mpcACCsystem_X.TransferFcn_CSTATE;\n  _rtXdot->TransferFcn_CSTATE += mpcACCsystem_B.Integrator;\n\n  // Derivatives for Integrator: '<S3>/Integrator1'\n  _rtXdot->Integrator1_CSTATE = mpcACCsystem_B.Sum1_m;\n\n  // Derivatives for Integrator: '<S2>/Integrator1'\n  _rtXdot->Integrator1_CSTATE_p = mpcACCsystem_B.Sum1;\n\n  // Derivatives for TransferFcn: '<S3>/Transfer Fcn'\n  _rtXdot->TransferFcn_CSTATE_i = -2.0 * mpcACCsystem_X.TransferFcn_CSTATE_i;\n  _rtXdot->TransferFcn_CSTATE_i += mpcACCsystem_B.Integrator_c;\n\n  // Derivatives for Integrator: '<S2>/Integrator' incorporates:\n  //   Outport: '<Root>/a_ego'\n\n  _rtXdot->Integrator_CSTATE = mpcACCsystem_Y.a_ego;\n\n  // Derivatives for Integrator: '<S3>/Integrator' incorporates:\n  //   Outport: '<Root>/a_lead'\n\n  _rtXdot->Integrator_CSTATE_a = mpcACCsystem_Y.a_lead;\n}\n\n// Model initialize function\nvoid mpcACCsystem::initialize()\n{\n  // Registration code\n  {\n    // Setup solver object\n    rtsiSetSimTimeStepPtr(&(&mpcACCsystem_M)->solverInfo, &(&mpcACCsystem_M)\n                          ->Timing.simTimeStep);\n    rtsiSetTPtr(&(&mpcACCsystem_M)->solverInfo, (&mpcACCsystem_M)->getTPtrPtr());\n    rtsiSetStepSizePtr(&(&mpcACCsystem_M)->solverInfo, &(&mpcACCsystem_M)\n                       ->Timing.stepSize0);\n    rtsiSetdXPtr(&(&mpcACCsystem_M)->solverInfo, &(&mpcACCsystem_M)->derivs);\n    rtsiSetContStatesPtr(&(&mpcACCsystem_M)->solverInfo, (real_T **)\n                         &(&mpcACCsystem_M)->contStates);\n    rtsiSetNumContStatesPtr(&(&mpcACCsystem_M)->solverInfo, &(&mpcACCsystem_M)\n      ->Sizes.numContStates);\n    rtsiSetNumPeriodicContStatesPtr(&(&mpcACCsystem_M)->solverInfo,\n      &(&mpcACCsystem_M)->Sizes.numPeriodicContStates);\n    rtsiSetPeriodicContStateIndicesPtr(&(&mpcACCsystem_M)->solverInfo,\n      &(&mpcACCsystem_M)->periodicContStateIndices);\n    rtsiSetPeriodicContStateRangesPtr(&(&mpcACCsystem_M)->solverInfo,\n      &(&mpcACCsystem_M)->periodicContStateRanges);\n    rtsiSetContStateDisabledPtr(&(&mpcACCsystem_M)->solverInfo, (boolean_T**) &(\n      &mpcACCsystem_M)->contStateDisabled);\n    rtsiSetErrorStatusPtr(&(&mpcACCsystem_M)->solverInfo, (&mpcACCsystem_M)\n                          ->getErrorStatusPtr());\n    rtsiSetRTModelPtr(&(&mpcACCsystem_M)->solverInfo, (&mpcACCsystem_M));\n  }\n\n  rtsiSetSimTimeStep(&(&mpcACCsystem_M)->solverInfo, MAJOR_TIME_STEP);\n  rtsiSetIsMinorTimeStepWithModeChange(&(&mpcACCsystem_M)->solverInfo, false);\n  rtsiSetIsContModeFrozen(&(&mpcACCsystem_M)->solverInfo, false);\n  (&mpcACCsystem_M)->intgData.y = (&mpcACCsystem_M)->odeY;\n  (&mpcACCsystem_M)->intgData.f[0] = (&mpcACCsystem_M)->odeF[0];\n  (&mpcACCsystem_M)->intgData.f[1] = (&mpcACCsystem_M)->odeF[1];\n  (&mpcACCsystem_M)->intgData.f[2] = (&mpcACCsystem_M)->odeF[2];\n  (&mpcACCsystem_M)->contStates = ((X_mpcACCsystem_T *) &mpcACCsystem_X);\n  (&mpcACCsystem_M)->contStateDisabled = ((XDis_mpcACCsystem_T *)\n    &mpcACCsystem_XDis);\n  (&mpcACCsystem_M)->Timing.tStart = (0.0);\n  rtsiSetSolverData(&(&mpcACCsystem_M)->solverInfo, static_cast<void *>\n                    (&(&mpcACCsystem_M)->intgData));\n  rtsiSetSolverName(&(&mpcACCsystem_M)->solverInfo,\"ode3\");\n  (&mpcACCsystem_M)->setTPtr(&(&mpcACCsystem_M)->Timing.tArray[0]);\n  (&mpcACCsystem_M)->Timing.stepSize0 = 0.1;\n\n  // InitializeConditions for TransferFcn: '<S2>/Transfer Fcn'\n  mpcACCsystem_X.TransferFcn_CSTATE = 0.0;\n\n  // InitializeConditions for Integrator: '<S3>/Integrator1'\n  mpcACCsystem_X.Integrator1_CSTATE = 0.0;\n\n  // InitializeConditions for Integrator: '<S2>/Integrator1'\n  mpcACCsystem_X.Integrator1_CSTATE_p = 0.0;\n\n  // InitializeConditions for TransferFcn: '<S3>/Transfer Fcn'\n  mpcACCsystem_X.TransferFcn_CSTATE_i = 0.0;\n\n  // InitializeConditions for Integrator: '<S2>/Integrator'\n  mpcACCsystem_X.Integrator_CSTATE = 0.0;\n\n  // InitializeConditions for Integrator: '<S3>/Integrator'\n  mpcACCsystem_X.Integrator_CSTATE_a = 0.0;\n\n  // Enable for Sin: '<Root>/Sine Wave'\n  mpcACCsystem_DW.systemEnable = 1;\n}\n\n// Model terminate function\nvoid mpcACCsystem::terminate()\n{\n  // (no terminate code required)\n}\n\ntime_T** mpcACCsystem::RT_MODEL_mpcACCsystem_T::getTPtrPtr()\n{\n  return &(Timing.t);\n}\n\ntime_T* mpcACCsystem::RT_MODEL_mpcACCsystem_T::getTPtr() const\n{\n  return (Timing.t);\n}\n\nvoid mpcACCsystem::RT_MODEL_mpcACCsystem_T::setTPtr(time_T* aTPtr)\n{\n  (Timing.t = aTPtr);\n}\n\nboolean_T mpcACCsystem::RT_MODEL_mpcACCsystem_T::isMinorTimeStep() const\n{\n  return ((Timing.simTimeStep) == MINOR_TIME_STEP);\n}\n\nboolean_T mpcACCsystem::RT_MODEL_mpcACCsystem_T::getStopRequested() const\n{\n  return (Timing.stopRequestedFlag);\n}\n\nvoid mpcACCsystem::RT_MODEL_mpcACCsystem_T::setStopRequested(boolean_T\n  aStopRequested)\n{\n  (Timing.stopRequestedFlag = aStopRequested);\n}\n\nboolean_T mpcACCsystem::RT_MODEL_mpcACCsystem_T::isMajorTimeStep() const\n{\n  return ((Timing.simTimeStep) == MAJOR_TIME_STEP);\n}\n\nboolean_T* mpcACCsystem::RT_MODEL_mpcACCsystem_T::getStopRequestedPtr()\n{\n  return (&(Timing.stopRequestedFlag));\n}\n\nconst char_T** mpcACCsystem::RT_MODEL_mpcACCsystem_T::getErrorStatusPtr()\n{\n  return &errorStatus;\n}\n\ntime_T mpcACCsystem::RT_MODEL_mpcACCsystem_T::getTStart() const\n{\n  return (Timing.tStart);\n}\n\nconst char_T* mpcACCsystem::RT_MODEL_mpcACCsystem_T::getErrorStatus() const\n{\n  return (errorStatus);\n}\n\nvoid mpcACCsystem::RT_MODEL_mpcACCsystem_T::setErrorStatus(const char_T* const\n  aErrorStatus)\n{\n  (errorStatus = aErrorStatus);\n}\n\n// Constructor\nmpcACCsystem::mpcACCsystem() :\n  mpcACCsystem_Y(),\n  mpcACCsystem_B(),\n  mpcACCsystem_DW(),\n  mpcACCsystem_X(),\n  mpcACCsystem_XDis(),\n  mpcACCsystem_M()\n{\n  // Currently there is no constructor body generated.\n}\n\n// Destructor\n// Currently there is no destructor body generated.\nmpcACCsystem::~mpcACCsystem() = default;\n\n// Real-Time Model get method\nmpcACCsystem::RT_MODEL_mpcACCsystem_T * mpcACCsystem::getRTM()\n{\n  return (&mpcACCsystem_M);\n}\n\n//\n// File trailer for generated code.\n//\n// [EOF]\n//\n"},{"name":"mpcACCsystem.h","type":"header","group":"model","path":"/Users/deyun/git/sim2cpp/AdaptiveCruiseControlExample/mpcACCsystem_ert_rtw","tag":"","groupDisplay":"Model files","code":"//\n// Academic License - for use in teaching, academic research, and meeting\n// course requirements at degree granting institutions only.  Not for\n// government, commercial, or other organizational use.\n//\n// File: mpcACCsystem.h\n//\n// Code generated for Simulink model 'mpcACCsystem'.\n//\n// Model version                  : 14.5\n// Simulink Coder version         : 24.2 (R2024b) 21-Jun-2024\n// C/C++ source code generated on : Sun Jun  8 15:50:16 2025\n//\n// Target selection: ert.tlc\n// Embedded hardware selection: Apple->ARM64\n// Code generation objectives: Unspecified\n// Validation result: Not run\n//\n#ifndef mpcACCsystem_h_\n#define mpcACCsystem_h_\n#include <cmath>\n#include \"rtwtypes.h\"\n#include \"rtw_continuous.h\"\n#include \"rtw_solver.h\"\n#include \"rt_nonfinite.h\"\n#include \"mpcACCsystem_types.h\"\n\nextern \"C\"\n{\n\n#include \"rtGetNaN.h\"\n\n}\n\n#include <cstring>\n#ifndef ODE3_INTG\n#define ODE3_INTG\n\n// ODE3 Integration Data\nstruct ODE3_IntgData {\n  real_T *y;                           // output\n  real_T *f[3];                        // derivatives\n};\n\n#endif\n\n// Class declaration for model mpcACCsystem\nclass mpcACCsystem final\n{\n  // public data and function members\n public:\n  // Block signals (default storage)\n  struct B_mpcACCsystem_T {\n    real_T Sum1;                       // '<S2>/Sum1'\n    real_T Sum1_m;                     // '<S3>/Sum1'\n    real_T Integrator;                 // '<S2>/Integrator'\n    real_T Integrator_c;               // '<S3>/Integrator'\n    real_T xk1[4];                     // '<S35>/optimizer'\n    real_T u;                          // '<S35>/optimizer'\n    boolean_T iAout[96];               // '<S35>/optimizer'\n  };\n\n  // Block states (default storage) for system '<Root>'\n  struct DW_mpcACCsystem_T {\n    real_T last_mv_DSTATE;             // '<S15>/last_mv'\n    real_T last_x_PreviousInput[4];    // '<S15>/last_x'\n    real_T lastSin;                    // '<Root>/Sine Wave'\n    real_T lastCos;                    // '<Root>/Sine Wave'\n    int32_T systemEnable;              // '<Root>/Sine Wave'\n    boolean_T Memory_PreviousInput[96];// '<S15>/Memory'\n  };\n\n  // Continuous states (default storage)\n  struct X_mpcACCsystem_T {\n    real_T TransferFcn_CSTATE;         // '<S2>/Transfer Fcn'\n    real_T Integrator1_CSTATE;         // '<S3>/Integrator1'\n    real_T Integrator1_CSTATE_p;       // '<S2>/Integrator1'\n    real_T TransferFcn_CSTATE_i;       // '<S3>/Transfer Fcn'\n    real_T Integrator_CSTATE;          // '<S2>/Integrator'\n    real_T Integrator_CSTATE_a;        // '<S3>/Integrator'\n  };\n\n  // State derivatives (default storage)\n  struct XDot_mpcACCsystem_T {\n    real_T TransferFcn_CSTATE;         // '<S2>/Transfer Fcn'\n    real_T Integrator1_CSTATE;         // '<S3>/Integrator1'\n    real_T Integrator1_CSTATE_p;       // '<S2>/Integrator1'\n    real_T TransferFcn_CSTATE_i;       // '<S3>/Transfer Fcn'\n    real_T Integrator_CSTATE;          // '<S2>/Integrator'\n    real_T Integrator_CSTATE_a;        // '<S3>/Integrator'\n  };\n\n  // State disabled\n  struct XDis_mpcACCsystem_T {\n    boolean_T TransferFcn_CSTATE;      // '<S2>/Transfer Fcn'\n    boolean_T Integrator1_CSTATE;      // '<S3>/Integrator1'\n    boolean_T Integrator1_CSTATE_p;    // '<S2>/Integrator1'\n    boolean_T TransferFcn_CSTATE_i;    // '<S3>/Transfer Fcn'\n    boolean_T Integrator_CSTATE;       // '<S2>/Integrator'\n    boolean_T Integrator_CSTATE_a;     // '<S3>/Integrator'\n  };\n\n  // Invariant block signals (default storage)\n  struct ConstB_mpcACCsystem_T {\n    real_T MathFunction[2];            // '<S15>/Math Function'\n    real_T MathFunction1;              // '<S15>/Math Function1'\n    real_T MathFunction2;              // '<S15>/Math Function2'\n  };\n\n  // External outputs (root outports fed by signals with default storage)\n  struct ExtY_mpcACCsystem_T {\n    real_T a_lead;                     // '<Root>/a_lead'\n    real_T d_rel;                      // '<Root>/d_rel'\n    real_T v_rel;                      // '<Root>/v_rel'\n    real_T v_ego;                      // '<Root>/v_ego'\n    real_T a_ego;                      // '<Root>/a_ego'\n  };\n\n  // Real-time Model Data Structure\n  using odeFSubArray = real_T[6];\n  struct RT_MODEL_mpcACCsystem_T {\n    const char_T *errorStatus;\n    RTWSolverInfo solverInfo;\n    X_mpcACCsystem_T *contStates;\n    int_T *periodicContStateIndices;\n    real_T *periodicContStateRanges;\n    real_T *derivs;\n    XDis_mpcACCsystem_T *contStateDisabled;\n    boolean_T zCCacheNeedsReset;\n    boolean_T derivCacheNeedsReset;\n    boolean_T CTOutputIncnstWithState;\n    real_T odeY[6];\n    real_T odeF[3][6];\n    ODE3_IntgData intgData;\n\n    //\n    //  Sizes:\n    //  The following substructure contains sizes information\n    //  for many of the model attributes such as inputs, outputs,\n    //  dwork, sample times, etc.\n\n    struct {\n      int_T numContStates;\n      int_T numPeriodicContStates;\n      int_T numSampTimes;\n    } Sizes;\n\n    //\n    //  Timing:\n    //  The following substructure contains information regarding\n    //  the timing information for the model.\n\n    struct {\n      uint32_T clockTick0;\n      time_T stepSize0;\n      uint32_T clockTick1;\n      time_T tStart;\n      SimTimeStep simTimeStep;\n      boolean_T stopRequestedFlag;\n      time_T *t;\n      time_T tArray[2];\n    } Timing;\n\n    time_T** getTPtrPtr();\n    time_T* getTPtr() const;\n    void setTPtr(time_T* aTPtr);\n    boolean_T isMinorTimeStep() const;\n    boolean_T getStopRequested() const;\n    void setStopRequested(boolean_T aStopRequested);\n    boolean_T isMajorTimeStep() const;\n    boolean_T* getStopRequestedPtr();\n    const char_T** getErrorStatusPtr();\n    time_T getTStart() const;\n    const char_T* getErrorStatus() const;\n    void setErrorStatus(const char_T* const aErrorStatus);\n  };\n\n  // Copy Constructor\n  mpcACCsystem(mpcACCsystem const&) = delete;\n\n  // Assignment Operator\n  mpcACCsystem& operator= (mpcACCsystem const&) & = delete;\n\n  // Move Constructor\n  mpcACCsystem(mpcACCsystem &&) = delete;\n\n  // Move Assignment Operator\n  mpcACCsystem& operator= (mpcACCsystem &&) = delete;\n\n  // Real-Time Model get method\n  mpcACCsystem::RT_MODEL_mpcACCsystem_T * getRTM();\n\n  // Root outports get method\n  const ExtY_mpcACCsystem_T &getExternalOutputs() const\n  {\n    return mpcACCsystem_Y;\n  }\n\n  // model initialize function\n  void initialize();\n\n  // model step function\n  void step();\n\n  // model terminate function\n  static void terminate();\n\n  // Constructor\n  mpcACCsystem();\n\n  // Destructor\n  ~mpcACCsystem();\n\n  // private data and function members\n private:\n  // External outputs\n  ExtY_mpcACCsystem_T mpcACCsystem_Y;\n\n  // Block signals\n  B_mpcACCsystem_T mpcACCsystem_B;\n\n  // Block states\n  DW_mpcACCsystem_T mpcACCsystem_DW;\n\n  // Block continuous states\n  X_mpcACCsystem_T mpcACCsystem_X;\n\n  // Block Continuous state disabled vector\n  XDis_mpcACCsystem_T mpcACCsystem_XDis;\n\n  // private member function(s) for subsystem '<S1>/DataTypeConversion_L0'\n  static void mpcACCsys_DataTypeConversion_L0(real_T rtu_u, real_T *rty_y);\n\n  // private member function(s) for subsystem '<Root>'\n  real_T mpcACCsystem_norm(const real_T x[4]);\n  real_T mpcACCsystem_maximum(const real_T x[4]);\n  real_T mpcACCsystem_xnrm2(int32_T n, const real_T x[16], int32_T ix0);\n  void mpcACCsystem_xgemv(int32_T b_m, int32_T n, const real_T b_A[16], int32_T\n    ia0, const real_T x[16], int32_T ix0, real_T y[4]);\n  void mpcACCsystem_xgerc(int32_T b_m, int32_T n, real_T alpha1, int32_T ix0,\n    const real_T y[4], real_T b_A[16], int32_T ia0);\n  void mpcACCsystem_KWIKfactor(const real_T b_Ac[384], const int32_T iC[96],\n    int32_T nA, const real_T b_Linv[16], real_T D[16], real_T b_H[16], int32_T n,\n    real_T RLinv[16], real_T *Status);\n  void mpcACCsystem_DropConstraint(int32_T kDrop, boolean_T iA[96], int32_T *nA,\n    int32_T iC[96]);\n  void mpcACCsystem_qpkwik(const real_T b_Linv[16], const real_T b_Hinv[16],\n    const real_T f[4], const real_T b_Ac[384], const real_T b[96], boolean_T iA\n    [96], int32_T maxiter, real_T FeasTol, real_T x[4], real_T lambda[96],\n    int32_T *status);\n\n  // Global mass matrix\n\n  // Continuous states update member function\n  void rt_ertODEUpdateContinuousStates(RTWSolverInfo *si );\n\n  // Derivatives member function\n  void mpcACCsystem_derivatives();\n\n  // Real-Time Model\n  RT_MODEL_mpcACCsystem_T mpcACCsystem_M;\n};\n\nextern const mpcACCsystem::ConstB_mpcACCsystem_T mpcACCsystem_ConstB;// constant block i/o \n\n//-\n//  These blocks were eliminated from the model due to optimizations:\n//\n//  Block '<S15>/Constant' : Unused code path elimination\n//  Block '<S15>/Floor' : Unused code path elimination\n//  Block '<S15>/Floor1' : Unused code path elimination\n//  Block '<S16>/Matrix Dimension Check' : Unused code path elimination\n//  Block '<S17>/Matrix Dimension Check' : Unused code path elimination\n//  Block '<S18>/Matrix Dimension Check' : Unused code path elimination\n//  Block '<S19>/Matrix Dimension Check' : Unused code path elimination\n//  Block '<S20>/Matrix Dimension Check' : Unused code path elimination\n//  Block '<S21>/Matrix Dimension Check' : Unused code path elimination\n//  Block '<S22>/Matrix Dimension Check' : Unused code path elimination\n//  Block '<S23>/Matrix Dimension Check' : Unused code path elimination\n//  Block '<S24>/Matrix Dimension Check' : Unused code path elimination\n//  Block '<S25>/Matrix Dimension Check' : Unused code path elimination\n//  Block '<S26>/Matrix Dimension Check' : Unused code path elimination\n//  Block '<S27>/Matrix Dimension Check' : Unused code path elimination\n//  Block '<S28>/Vector Dimension Check' : Unused code path elimination\n//  Block '<S29>/Vector Dimension Check' : Unused code path elimination\n//  Block '<S30>/Vector Dimension Check' : Unused code path elimination\n//  Block '<S31>/Vector Dimension Check' : Unused code path elimination\n//  Block '<S32>/Vector Dimension Check' : Unused code path elimination\n//  Block '<S33>/Vector Dimension Check' : Unused code path elimination\n//  Block '<S15>/Min' : Unused code path elimination\n//  Block '<S15>/constant' : Unused code path elimination\n//  Block '<S34>/Vector Dimension Check' : Unused code path elimination\n//  Block '<S15>/umin_scale2' : Unused code path elimination\n//  Block '<S15>/umin_scale3' : Unused code path elimination\n//  Block '<S15>/umin_scale5' : Unused code path elimination\n//  Block '<S15>/ym_zero' : Unused code path elimination\n//  Block '<S14>/m_zero' : Unused code path elimination\n//  Block '<S14>/p_zero' : Unused code path elimination\n//  Block '<S15>/Reshape' : Reshape block reduction\n//  Block '<S15>/Reshape1' : Reshape block reduction\n//  Block '<S15>/Reshape2' : Reshape block reduction\n//  Block '<S15>/Reshape3' : Reshape block reduction\n//  Block '<S15>/Reshape4' : Reshape block reduction\n//  Block '<S15>/Reshape5' : Reshape block reduction\n\n\n//-\n//  The generated code includes comments that allow you to trace directly\n//  back to the appropriate location in the model.  The basic format\n//  is <system>/block_name, where system is the system number (uniquely\n//  assigned by Simulink) and block_name is the name of the block.\n//\n//  Use the MATLAB hilite_system command to trace the generated code back\n//  to the model.  For example,\n//\n//  hilite_system('<S3>')    - opens system 3\n//  hilite_system('<S3>/Kp') - opens and selects block Kp which resides in S3\n//\n//  Here is the system hierarchy for this model\n//\n//  '<Root>' : 'mpcACCsystem'\n//  '<S1>'   : 'mpcACCsystem/Adaptive Cruise Control System'\n//  '<S2>'   : 'mpcACCsystem/Ego Car'\n//  '<S3>'   : 'mpcACCsystem/Lead Car'\n//  '<S4>'   : 'mpcACCsystem/Adaptive Cruise Control System/DataTypeConversion_L0'\n//  '<S5>'   : 'mpcACCsystem/Adaptive Cruise Control System/DataTypeConversion_amax'\n//  '<S6>'   : 'mpcACCsystem/Adaptive Cruise Control System/DataTypeConversion_amin'\n//  '<S7>'   : 'mpcACCsystem/Adaptive Cruise Control System/DataTypeConversion_atrack'\n//  '<S8>'   : 'mpcACCsystem/Adaptive Cruise Control System/DataTypeConversion_dmin'\n//  '<S9>'   : 'mpcACCsystem/Adaptive Cruise Control System/DataTypeConversion_optsgn'\n//  '<S10>'  : 'mpcACCsystem/Adaptive Cruise Control System/DataTypeConversion_reldist'\n//  '<S11>'  : 'mpcACCsystem/Adaptive Cruise Control System/DataTypeConversion_vego'\n//  '<S12>'  : 'mpcACCsystem/Adaptive Cruise Control System/DataTypeConversion_vlead'\n//  '<S13>'  : 'mpcACCsystem/Adaptive Cruise Control System/DataTypeConversion_vset'\n//  '<S14>'  : 'mpcACCsystem/Adaptive Cruise Control System/MPC'\n//  '<S15>'  : 'mpcACCsystem/Adaptive Cruise Control System/MPC/MPC'\n//  '<S16>'  : 'mpcACCsystem/Adaptive Cruise Control System/MPC/MPC/MPC Matrix Signal Check'\n//  '<S17>'  : 'mpcACCsystem/Adaptive Cruise Control System/MPC/MPC/MPC Matrix Signal Check1'\n//  '<S18>'  : 'mpcACCsystem/Adaptive Cruise Control System/MPC/MPC/MPC Matrix Signal Check2'\n//  '<S19>'  : 'mpcACCsystem/Adaptive Cruise Control System/MPC/MPC/MPC Preview Signal Check'\n//  '<S20>'  : 'mpcACCsystem/Adaptive Cruise Control System/MPC/MPC/MPC Preview Signal Check1'\n//  '<S21>'  : 'mpcACCsystem/Adaptive Cruise Control System/MPC/MPC/MPC Preview Signal Check2'\n//  '<S22>'  : 'mpcACCsystem/Adaptive Cruise Control System/MPC/MPC/MPC Preview Signal Check3'\n//  '<S23>'  : 'mpcACCsystem/Adaptive Cruise Control System/MPC/MPC/MPC Preview Signal Check4'\n//  '<S24>'  : 'mpcACCsystem/Adaptive Cruise Control System/MPC/MPC/MPC Preview Signal Check5'\n//  '<S25>'  : 'mpcACCsystem/Adaptive Cruise Control System/MPC/MPC/MPC Preview Signal Check6'\n//  '<S26>'  : 'mpcACCsystem/Adaptive Cruise Control System/MPC/MPC/MPC Preview Signal Check7'\n//  '<S27>'  : 'mpcACCsystem/Adaptive Cruise Control System/MPC/MPC/MPC Preview Signal Check8'\n//  '<S28>'  : 'mpcACCsystem/Adaptive Cruise Control System/MPC/MPC/MPC Scalar Signal Check'\n//  '<S29>'  : 'mpcACCsystem/Adaptive Cruise Control System/MPC/MPC/MPC Scalar Signal Check1'\n//  '<S30>'  : 'mpcACCsystem/Adaptive Cruise Control System/MPC/MPC/MPC Scalar Signal Check2'\n//  '<S31>'  : 'mpcACCsystem/Adaptive Cruise Control System/MPC/MPC/MPC Vector Signal Check'\n//  '<S32>'  : 'mpcACCsystem/Adaptive Cruise Control System/MPC/MPC/MPC Vector Signal Check1'\n//  '<S33>'  : 'mpcACCsystem/Adaptive Cruise Control System/MPC/MPC/MPC Vector Signal Check6'\n//  '<S34>'  : 'mpcACCsystem/Adaptive Cruise Control System/MPC/MPC/moorx'\n//  '<S35>'  : 'mpcACCsystem/Adaptive Cruise Control System/MPC/MPC/optimizer'\n//  '<S36>'  : 'mpcACCsystem/Adaptive Cruise Control System/MPC/MPC/optimizer/optimizer'\n\n#endif                                 // mpcACCsystem_h_\n\n//\n// File trailer for generated code.\n//\n// [EOF]\n//\n"},{"name":"mpcACCsystem_private.h","type":"header","group":"model","path":"/Users/deyun/git/sim2cpp/AdaptiveCruiseControlExample/mpcACCsystem_ert_rtw","tag":"","groupDisplay":"Model files","code":"//\n// Academic License - for use in teaching, academic research, and meeting\n// course requirements at degree granting institutions only.  Not for\n// government, commercial, or other organizational use.\n//\n// File: mpcACCsystem_private.h\n//\n// Code generated for Simulink model 'mpcACCsystem'.\n//\n// Model version                  : 14.5\n// Simulink Coder version         : 24.2 (R2024b) 21-Jun-2024\n// C/C++ source code generated on : Sun Jun  8 15:50:16 2025\n//\n// Target selection: ert.tlc\n// Embedded hardware selection: Apple->ARM64\n// Code generation objectives: Unspecified\n// Validation result: Not run\n//\n#ifndef mpcACCsystem_private_h_\n#define mpcACCsystem_private_h_\n#include \"rtwtypes.h\"\n#include \"mpcACCsystem_types.h\"\n#include \"rtw_continuous.h\"\n#include \"rtw_solver.h\"\n\nextern real_T rt_hypotd_snf(real_T u0, real_T u1);\n\n// private model entry point functions\nextern void mpcACCsystem_derivatives();\n\n#endif                                 // mpcACCsystem_private_h_\n\n//\n// File trailer for generated code.\n//\n// [EOF]\n//\n"},{"name":"mpcACCsystem_types.h","type":"header","group":"model","path":"/Users/deyun/git/sim2cpp/AdaptiveCruiseControlExample/mpcACCsystem_ert_rtw","tag":"","groupDisplay":"Model files","code":"//\n// Academic License - for use in teaching, academic research, and meeting\n// course requirements at degree granting institutions only.  Not for\n// government, commercial, or other organizational use.\n//\n// File: mpcACCsystem_types.h\n//\n// Code generated for Simulink model 'mpcACCsystem'.\n//\n// Model version                  : 14.5\n// Simulink Coder version         : 24.2 (R2024b) 21-Jun-2024\n// C/C++ source code generated on : Sun Jun  8 15:50:16 2025\n//\n// Target selection: ert.tlc\n// Embedded hardware selection: Apple->ARM64\n// Code generation objectives: Unspecified\n// Validation result: Not run\n//\n#ifndef mpcACCsystem_types_h_\n#define mpcACCsystem_types_h_\n#endif                                 // mpcACCsystem_types_h_\n\n//\n// File trailer for generated code.\n//\n// [EOF]\n//\n"},{"name":"mpcACCsystem_data.cpp","type":"source","group":"data","path":"/Users/deyun/git/sim2cpp/AdaptiveCruiseControlExample/mpcACCsystem_ert_rtw","tag":"","groupDisplay":"Data files","code":"//\n// Academic License - for use in teaching, academic research, and meeting\n// course requirements at degree granting institutions only.  Not for\n// government, commercial, or other organizational use.\n//\n// File: mpcACCsystem_data.cpp\n//\n// Code generated for Simulink model 'mpcACCsystem'.\n//\n// Model version                  : 14.5\n// Simulink Coder version         : 24.2 (R2024b) 21-Jun-2024\n// C/C++ source code generated on : Sun Jun  8 15:50:16 2025\n//\n// Target selection: ert.tlc\n// Embedded hardware selection: Apple->ARM64\n// Code generation objectives: Unspecified\n// Validation result: Not run\n//\n#include \"mpcACCsystem.h\"\n\n// Invariant block signals (default storage)\nconst mpcACCsystem::ConstB_mpcACCsystem_T mpcACCsystem_ConstB{\n  {\n    0.0,\n    0.0\n  }\n  ,                                    // '<S15>/Math Function'\n  0.0\n  ,                                    // '<S15>/Math Function1'\n  0.0\n  // '<S15>/Math Function2'\n};\n\n//\n// File trailer for generated code.\n//\n// [EOF]\n//\n"},{"name":"rtGetNaN.cpp","type":"source","group":"utility","path":"/Users/deyun/git/sim2cpp/AdaptiveCruiseControlExample/mpcACCsystem_ert_rtw","tag":"","groupDisplay":"Utility files","code":"//\n// Academic License - for use in teaching, academic research, and meeting\n// course requirements at degree granting institutions only.  Not for\n// government, commercial, or other organizational use.\n//\n// File: rtGetNaN.cpp\n//\n// Code generated for Simulink model 'mpcACCsystem'.\n//\n// Model version                  : 14.5\n// Simulink Coder version         : 24.2 (R2024b) 21-Jun-2024\n// C/C++ source code generated on : Sun Jun  8 15:50:16 2025\n//\n// Target selection: ert.tlc\n// Embedded hardware selection: Apple->ARM64\n// Code generation objectives: Unspecified\n// Validation result: Not run\n//\n\n#include \"rtwtypes.h\"\n\nextern \"C\"\n{\n\n#include \"rtGetNaN.h\"\n\n}\n\nextern \"C\"\n{\n  // Return rtNaN needed by the generated code.\n  real_T rtGetNaN(void)\n  {\n    return rtNaN;\n  }\n\n  // Return rtNaNF needed by the generated code.\n  real32_T rtGetNaNF(void)\n  {\n    return rtNaNF;\n  }\n}\n\n//\n// File trailer for generated code.\n//\n// [EOF]\n//\n"},{"name":"rtGetNaN.h","type":"header","group":"utility","path":"/Users/deyun/git/sim2cpp/AdaptiveCruiseControlExample/mpcACCsystem_ert_rtw","tag":"","groupDisplay":"Utility files","code":"//\n// Academic License - for use in teaching, academic research, and meeting\n// course requirements at degree granting institutions only.  Not for\n// government, commercial, or other organizational use.\n//\n// File: rtGetNaN.h\n//\n// Code generated for Simulink model 'mpcACCsystem'.\n//\n// Model version                  : 14.5\n// Simulink Coder version         : 24.2 (R2024b) 21-Jun-2024\n// C/C++ source code generated on : Sun Jun  8 15:50:16 2025\n//\n// Target selection: ert.tlc\n// Embedded hardware selection: Apple->ARM64\n// Code generation objectives: Unspecified\n// Validation result: Not run\n//\n#ifndef rtGetNaN_h_\n#define rtGetNaN_h_\n\nextern \"C\"\n{\n\n#include \"rt_nonfinite.h\"\n\n}\n\n#include \"rtwtypes.h\"\n#ifdef __cplusplus\n\nextern \"C\"\n{\n\n#endif\n\n  extern real_T rtGetNaN(void);\n  extern real32_T rtGetNaNF(void);\n\n#ifdef __cplusplus\n\n}                                      // extern \"C\"\n\n#endif\n#endif                                 // rtGetNaN_h_\n\n//\n// File trailer for generated code.\n//\n// [EOF]\n//\n"},{"name":"rt_nonfinite.cpp","type":"source","group":"utility","path":"/Users/deyun/git/sim2cpp/AdaptiveCruiseControlExample/mpcACCsystem_ert_rtw","tag":"","groupDisplay":"Utility files","code":"//\n// Academic License - for use in teaching, academic research, and meeting\n// course requirements at degree granting institutions only.  Not for\n// government, commercial, or other organizational use.\n//\n// File: rt_nonfinite.cpp\n//\n// Code generated for Simulink model 'mpcACCsystem'.\n//\n// Model version                  : 14.5\n// Simulink Coder version         : 24.2 (R2024b) 21-Jun-2024\n// C/C++ source code generated on : Sun Jun  8 15:50:16 2025\n//\n// Target selection: ert.tlc\n// Embedded hardware selection: Apple->ARM64\n// Code generation objectives: Unspecified\n// Validation result: Not run\n//\n\n#include \"rtwtypes.h\"\n\nextern \"C\"\n{\n\n#include \"rt_nonfinite.h\"\n\n}\n\n#include \"limits\"\n#include \"cmath\"\n\nextern \"C\"\n{\n  real_T rtNaN { -std::numeric_limits<real_T>::quiet_NaN() };\n\n  real_T rtInf { std::numeric_limits<real_T>::infinity() };\n\n  real_T rtMinusInf { -std::numeric_limits<real_T>::infinity() };\n\n  real32_T rtNaNF { -std::numeric_limits<real32_T>::quiet_NaN() };\n\n  real32_T rtInfF { std::numeric_limits<real32_T>::infinity() };\n\n  real32_T rtMinusInfF { -std::numeric_limits<real32_T>::infinity() };\n}\n\nextern \"C\"\n{\n  // Test if value is infinite\n  boolean_T rtIsInf(real_T value)\n  {\n    return std::isinf(value);\n  }\n\n  // Test if single-precision value is infinite\n  boolean_T rtIsInfF(real32_T value)\n  {\n    return std::isinf(value);\n  }\n\n  // Test if value is not a number\n  boolean_T rtIsNaN(real_T value)\n  {\n    return std::isnan(value);\n  }\n\n  // Test if single-precision value is not a number\n  boolean_T rtIsNaNF(real32_T value)\n  {\n    return std::isnan(value);\n  }\n}\n\n//\n// File trailer for generated code.\n//\n// [EOF]\n//\n"},{"name":"rt_nonfinite.h","type":"header","group":"utility","path":"/Users/deyun/git/sim2cpp/AdaptiveCruiseControlExample/mpcACCsystem_ert_rtw","tag":"","groupDisplay":"Utility files","code":"//\n// Academic License - for use in teaching, academic research, and meeting\n// course requirements at degree granting institutions only.  Not for\n// government, commercial, or other organizational use.\n//\n// File: rt_nonfinite.h\n//\n// Code generated for Simulink model 'mpcACCsystem'.\n//\n// Model version                  : 14.5\n// Simulink Coder version         : 24.2 (R2024b) 21-Jun-2024\n// C/C++ source code generated on : Sun Jun  8 15:50:16 2025\n//\n// Target selection: ert.tlc\n// Embedded hardware selection: Apple->ARM64\n// Code generation objectives: Unspecified\n// Validation result: Not run\n//\n#ifndef rt_nonfinite_h_\n#define rt_nonfinite_h_\n#include \"rtwtypes.h\"\n#ifdef __cplusplus\n\nextern \"C\"\n{\n\n#endif\n\n  extern real_T rtInf;\n  extern real_T rtMinusInf;\n  extern real_T rtNaN;\n  extern real32_T rtInfF;\n  extern real32_T rtMinusInfF;\n  extern real32_T rtNaNF;\n  extern boolean_T rtIsInf(real_T value);\n  extern boolean_T rtIsInfF(real32_T value);\n  extern boolean_T rtIsNaN(real_T value);\n  extern boolean_T rtIsNaNF(real32_T value);\n\n#ifdef __cplusplus\n\n}                                      // extern \"C\"\n\n#endif\n#endif                                 // rt_nonfinite_h_\n\n//\n// File trailer for generated code.\n//\n// [EOF]\n//\n"},{"name":"rtwtypes.h","type":"header","group":"utility","path":"/Users/deyun/git/sim2cpp/AdaptiveCruiseControlExample/mpcACCsystem_ert_rtw","tag":"","groupDisplay":"Utility files","code":"//\n// Academic License - for use in teaching, academic research, and meeting\n// course requirements at degree granting institutions only.  Not for\n// government, commercial, or other organizational use.\n//\n// File: rtwtypes.h\n//\n// Code generated for Simulink model 'mpcACCsystem'.\n//\n// Model version                  : 14.5\n// Simulink Coder version         : 24.2 (R2024b) 21-Jun-2024\n// C/C++ source code generated on : Sun Jun  8 15:50:16 2025\n//\n// Target selection: ert.tlc\n// Embedded hardware selection: Apple->ARM64\n// Code generation objectives: Unspecified\n// Validation result: Not run\n//\n\n#ifndef RTWTYPES_H\n#define RTWTYPES_H\n\n// Logical type definitions\n#if (!defined(__cplusplus))\n#ifndef false\n#define false                          (0U)\n#endif\n\n#ifndef true\n#define true                           (1U)\n#endif\n#endif\n\n//=======================================================================*\n//  Target hardware information\n//    Device type: Apple->ARM64\n//    Number of bits:     char:   8    short:   16    int:  32\n//                        long:  64\n//                        native word size:  64\n//    Byte ordering: LittleEndian\n//    Signed integer division rounds to: Zero\n//    Shift right on a signed integer as arithmetic shift: on\n// =======================================================================\n\n//=======================================================================*\n//  Fixed width word size data types:                                     *\n//    int8_T, int16_T, int32_T     - signed 8, 16, or 32 bit integers     *\n//    uint8_T, uint16_T, uint32_T  - unsigned 8, 16, or 32 bit integers   *\n//    real32_T, real64_T           - 32 and 64 bit floating point numbers *\n// =======================================================================\ntypedef signed char int8_T;\ntypedef unsigned char uint8_T;\ntypedef short int16_T;\ntypedef unsigned short uint16_T;\ntypedef int int32_T;\ntypedef unsigned int uint32_T;\ntypedef long int64_T;\ntypedef unsigned long uint64_T;\ntypedef float real32_T;\ntypedef double real64_T;\n\n//===========================================================================*\n//  Generic type definitions: boolean_T, char_T, byte_T, int_T, uint_T,       *\n//                            real_T, time_T, ulong_T.                        *\n// ===========================================================================\ntypedef double real_T;\ntypedef double time_T;\ntypedef unsigned char boolean_T;\ntypedef int int_T;\ntypedef unsigned int uint_T;\ntypedef unsigned long ulong_T;\ntypedef char char_T;\ntypedef unsigned char uchar_T;\ntypedef char_T byte_T;\n\n//===========================================================================*\n//  Complex number type definitions                                           *\n// ===========================================================================\n#define CREAL_T\n\ntypedef struct {\n  real32_T re;\n  real32_T im;\n} creal32_T;\n\ntypedef struct {\n  real64_T re;\n  real64_T im;\n} creal64_T;\n\ntypedef struct {\n  real_T re;\n  real_T im;\n} creal_T;\n\n#define CINT8_T\n\ntypedef struct {\n  int8_T re;\n  int8_T im;\n} cint8_T;\n\n#define CUINT8_T\n\ntypedef struct {\n  uint8_T re;\n  uint8_T im;\n} cuint8_T;\n\n#define CINT16_T\n\ntypedef struct {\n  int16_T re;\n  int16_T im;\n} cint16_T;\n\n#define CUINT16_T\n\ntypedef struct {\n  uint16_T re;\n  uint16_T im;\n} cuint16_T;\n\n#define CINT32_T\n\ntypedef struct {\n  int32_T re;\n  int32_T im;\n} cint32_T;\n\n#define CUINT32_T\n\ntypedef struct {\n  uint32_T re;\n  uint32_T im;\n} cuint32_T;\n\n#define CINT64_T\n\ntypedef struct {\n  int64_T re;\n  int64_T im;\n} cint64_T;\n\n#define CUINT64_T\n\ntypedef struct {\n  uint64_T re;\n  uint64_T im;\n} cuint64_T;\n\n//=======================================================================*\n//  Min and Max:                                                          *\n//    int8_T, int16_T, int32_T     - signed 8, 16, or 32 bit integers     *\n//    uint8_T, uint16_T, uint32_T  - unsigned 8, 16, or 32 bit integers   *\n// =======================================================================\n#define MAX_int8_T                     ((int8_T)(127))\n#define MIN_int8_T                     ((int8_T)(-128))\n#define MAX_uint8_T                    ((uint8_T)(255U))\n#define MAX_int16_T                    ((int16_T)(32767))\n#define MIN_int16_T                    ((int16_T)(-32768))\n#define MAX_uint16_T                   ((uint16_T)(65535U))\n#define MAX_int32_T                    ((int32_T)(2147483647))\n#define MIN_int32_T                    ((int32_T)(-2147483647-1))\n#define MAX_uint32_T                   ((uint32_T)(0xFFFFFFFFU))\n#define MAX_int64_T                    ((int64_T)(9223372036854775807L))\n#define MIN_int64_T                    ((int64_T)(-9223372036854775807L-1L))\n#define MAX_uint64_T                   ((uint64_T)(0xFFFFFFFFFFFFFFFFUL))\n\n// Block D-Work pointer type\ntypedef void * pointer_T;\n\n#endif                                 // RTWTYPES_H\n\n//\n// File trailer for generated code.\n//\n// [EOF]\n//\n"}],"coverage":[{"id":"SimulinkCoverage","name":"Simulink Coverage","files":[]},{"id":"Bullseye","name":"Bullseye Coverage","files":[]},{"id":"LDRA","name":"LDRA Testbed","files":[]}],"features":{"annotation":false,"coverage":true,"profiling":true,"tooltip":true,"coverageTooltip":true,"showJustificationLinks":true,"useMWTable":false,"showProfilingInfo":true,"showTaskSummary":true,"showProtectedV2Report":true}};